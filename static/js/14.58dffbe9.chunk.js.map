{"version":3,"sources":["utils/numberFormat.js","methods/CoreMethod.js","components/modals/CollateralModal.module.scss","images/freshBank/supply_empty.svg","images/freshBank/borrow_empty.svg","components/subComponents/WithdrawModalV2/WithdrawModal.js","components/modals/SavingsModalAll.js","components/subComponents/RepayModalV2/RepayModal.js","components/modals/RepayModalAll.js","components/modals/CollateralModal.js","components/accountsV2/Accounts.js"],"names":["formatBigNumber","num","decimals","isNaN","toNumber","toLocaleString","maximumFractionDigits","formatDecimalPlace","decimalPlace","reg","RegExp","test","toFixed","validateDecimal","decimalNum","approveERC20","web3","connectedAddress","networkType","market","contractABI","ABI","contractAddress","network","address","eth","Contract","contract","qContractAddress","qToken","maxApproval","BigNumber","pow","minus","CoreData","getGasInfo","gasInfo","max","toString","params","from","recomputeGas","methods","approve","send","response","approveSwapRepayERC20","Config","SwapRepayContract","approveDepositRepayERC20","DepositRepayContract","approveDepositSwapERC20","DepositSwapContract","approveLiquidateERC20","version","approveAddress","LiquidateContract","module","exports","WithdrawModal","props","useContext","WalletAddressContext","NetworkTypeContext","Web3Context","inSafe","styles","useTranslation","t","i18n","useState","inputValue","setInputValue","loading","setLoading","setWithdrawSafeMax","withdrawBtnDisabled","setWithdrawBtnDisabled","withdrawCheck","setWithdrawCheck","withdrawCompleted","setWithdrawCompleted","withdrawFailed","setWithdrawFailed","txnHash","setTxnHash","setIsMax","isUnMountedRef","useRef","savingsBalanceFormatted","data","savingsBalanceFiat","totalloanbalance","alldata","totalLoanBalance","totalborrowlimitfiat","totalBorrowLimitFiat","getAmount","percent","otherLoanBalance","multipliedBy","collateralFactor","amount","div","price","lt","eq","isAssetMember","withdrawMaxTotal","borrowLimit","withdrawAbove85","loanUsedPercentFixed2","Number","value","inputV","changedLoanBalance","times","temp","plus","isEqualTo","loanUsedPercent","isFinite","getPercent","useEffect","lte","getRawValue","symbol","handleClose","closeModal","current","validateInput","isInput","isNegative","absoluteValue","gt","handleWithdraw","handleUpdate","gtagParams","url","window","location","href","withdrawAmount","getQTokenContract","redeemFunction","redeemUnderlying","rawWithdrawAmount","savingsCTokenBalance","redeem","on","hash","withdrawTxnHash","content","then","events","Failure","gtag","error","catch","log","code","FooterList","safeMax","className","TxnSuccessMsg","type","okText","handleOk","savingsBalance","footerList","TxnErrorMsg","Consumer","title","ModalLoading","action","toLowerCase","controlId","showMax","onChange","e","target","maxOnClick","tips","checkId","checked","v","smallIconTips","showTitle","Button","variant","disabled","onClick","ModalWithdrawForm","SavingsModalAll","tabKey","setTabKey","setSwapData","swapAsset","setSwapAsset","filter","d","isLPToken","sort","a","b","Modal","aria-labelledby","centered","Header","closeButton","Body","Tab","Container","id","defaultActiveKey","onSelect","key","Nav","Item","Link","eventKey","Content","Pane","onHide","RepayModal","overPay","setOverPay","lowBalance","setLowBalance","repayCompleted","setRepayCompleted","repayFailed","setRepayFailed","needsFurtherApproval","setNeedsFurtherApproval","allowanceFormatted","setAllowanceFormatted","isMax","firstApproval","setFirstApproval","resetErrorTips","parseFloat","loanBalance","walletBalance","verifyFurtherApproval","txnValue","isNativeToken","FetchData","getAccountAllowance","allowance","Promise","resolve","setMaximum","fullPayOnly","loanRepayAmount","loanBalanceFormatted","gte","walletBalanceFormatted","handleRepay","repayAmount","getMaximillion","maximillionContract","repayBehalf","repayBorrow","utils","toBN","sendParams","repayTxnHash","handleApprove","first","CoreMethod","sleep","ModalApprovalRequest","showTransation","token","getApprovalMsgToken","ModalFurtherApprovalRequest","ModalLoaded","toUpperCase","language","approved","style","width","marginTop","ModalRepayForm","RepayModalAll","setSwapWalletList","swapWalletAsset","setSwapWalletAsset","setSwapSavingList","swapSavingAsset","setSwapSavingAsset","walletData","savingData","allData","CollateralModal","classNames","Accounts","showRepayModal","setShowRepayModal","showWithdrawModal","setShowWithdrawModal","showCollateralErrorModal","setShowCollateralErrorModal","modalMarketIndex","setModalMarketIndex","field","direction","savingSort","loanSort","curSavingList","setSavingCurList","curLoanList","setCurLoanList","collateralLoading","setCollateralLoading","collateralHash","setCollateralHash","collateralStatus","setCollateralStatus","undefined","console","savingList","cloneDeep","loanList","sortData","map","item","mode","handleShow","i","getCData","index","cloneData","handleCollateral","getComptroller","comptroller","marketAddress","exitMarket","gasLimit","toHex","gasPrice","enterMarkets","list","compare","aItem","uiName","name","bItem","up","s1","s2","savingsAPY","savingsMintAPY","lpTotalAPY","loanAPY","loanMintAPY","curCurrenry","loanBalanceFiat","Object","entries","parseInt","AccountsLoading","emptyMessageContainer","height","speed","backgroundColor","loadingColors","background","foregroundColor","foreground","x","y","rx","ry","SavingsEmptyMsg","emptyMessage","src","SupplyEmptyImage","alt","message","description","LoanEmptyMsg","BorrowEmptyImage","ActiveSavingsAccounts","asset","logo1","logo2","logo","dataContainer","dataPrimary","dataSecondary","getCurrencyFormatted","colSpan","pendingDesc","Form","Check","switchbutton","size","ActiveLoanAccounts","SavingsAccountsList","Table","responsive","tableContainer","textTransform","titleTxt","desc","LoanAccountsList","accounts","accountsContainer","Row","accountsWrap","Col","sm","lg","tile","totalSavingsBalance","show"],"mappings":"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","file":"static/js/14.58dffbe9.chunk.js","sourcesContent":["import { BigNumber } from 'bignumber.js'\r\n\r\nexport const formatBigNumber = (num, decimals) => {\r\n    if (isNaN(num) || num === null) {\r\n        return \"0\";\r\n    }\r\n\r\n    const n = (typeof num) === \"number\" ? num : num.toNumber();\r\n    return n.toLocaleString(\"en-US\", { maximumFractionDigits: decimals ?? 20 })\r\n}\r\n\r\nexport const formatDecimalNumber = (value) => {\r\n    const oldValue = new BigNumber(value);\r\n    if (oldValue.multipliedBy(100).abs() >= 1) {\r\n        return oldValue.toFixed(2, 1);\r\n    }\r\n    else if (oldValue.multipliedBy(100).abs() < 1 && oldValue.multipliedBy(10000).abs() >= 1) {\r\n        return oldValue.toFixed(4, 1);\r\n    }\r\n    else {\r\n        return oldValue.toString(10);\r\n    }\r\n}\r\n\r\nexport const formatBigNumberWithDecimals = (bigNumber, decimals, decimalPlace, toLocaleString) => {\r\n    if (!bigNumber) {\r\n        return\r\n    }\r\n\r\n    let dot = decimalPlace\r\n    // if (process.env.NODE_ENV === \"development\") {\r\n    //     dot = null\r\n    // }\r\n\r\n    if ((typeof bigNumber) === \"number\" || (typeof bigNumber) === \"string\") {\r\n        const n = new BigNumber(bigNumber).dividedBy(new BigNumber(10).pow(decimals))\r\n        if (toLocaleString) {\r\n            return n.toNumber().toLocaleString()\r\n        } else {\r\n            return n.toFixed(dot)\r\n        }\r\n    }\r\n\r\n    const n = bigNumber.dividedBy(new BigNumber(10).pow(decimals))\r\n    if (toLocaleString) {\r\n        return n.toNumber().toLocaleString()\r\n    } else {\r\n        return n.toFixed(dot)\r\n    }\r\n}\r\n\r\nexport const formatDecimalPlace = (num, decimalPlace = 4) => {\r\n    const reg = new RegExp('^(\\\\d)+(\\\\.(\\\\d){1,' + decimalPlace + '})?$')\r\n    return reg.test(num) ? num : num.toFixed(decimalPlace)\r\n}\r\n\r\n\r\n// 验证小数位数\r\nexport const validateDecimal = (decimalNum = 18) => new RegExp(\"^\\\\d*(\\\\.\\\\d{0,\" + decimalNum + \"})?$\")\r\n\r\n","import { BigNumber } from 'bignumber.js'\nimport CoreData from './CoreData'\nimport Config from '../utils/config'\n\nconst gasLimit = 1000000\n\nconst approveERC20 = async(web3, connectedAddress, networkType, market) => {\n\n    const contractABI = market.ABI;\n    const contractAddress = market.network[networkType].address;\n    let contract = await new web3.eth.Contract(contractABI, contractAddress);\n\n    //erc20 qToken Info (eg: qDAI)\n    const qContractAddress = market.qToken.network[networkType].address;\n    const maxApproval = new BigNumber(2).pow(256).minus(1);\n\n    const gasInfo = await CoreData.getGasInfo(web3);\n\n    const max = maxApproval.toString(10);\n    let params = { from: connectedAddress };\n    params = await CoreData.recomputeGas(contract.methods.approve(qContractAddress, max), params, gasInfo, networkType);\n    let response = await contract.methods.approve(qContractAddress, max).send(params);\n\n    return response\n}\n\nconst approveSwapRepayERC20 = async(web3, connectedAddress, networkType, market) => {\n\n    const contractABI = market.ABI;\n    const contractAddress = market.network[networkType].address;\n    let contract = await new web3.eth.Contract(contractABI, contractAddress);\n\n    const maxApproval = new BigNumber(2).pow(256).minus(1);\n\n    const gasInfo = await CoreData.getGasInfo(web3);\n\n    const max = maxApproval.toString(10);\n    let params = { from: connectedAddress };\n    params = await CoreData.recomputeGas(contract.methods.approve(Config.SwapRepayContract[networkType], max), params, gasInfo, networkType);\n    let response = await contract.methods.approve(Config.SwapRepayContract[networkType], max).send(params);\n\n    return response\n}\n\nconst approveDepositRepayERC20 = async(web3, connectedAddress, networkType, market) => {\n\n    const contractABI = market.qToken.ABI;\n    const contractAddress = market.qToken.network[networkType].address;\n    let contract = await new web3.eth.Contract(contractABI, contractAddress);\n\n    const maxApproval = new BigNumber(2).pow(256).minus(1);\n\n    const gasInfo = await CoreData.getGasInfo(web3);\n\n    const max = maxApproval.toString(10);\n    let params = { from: connectedAddress };\n    params = await CoreData.recomputeGas(contract.methods.approve(Config.DepositRepayContract[networkType], max), params, gasInfo, networkType);\n    let response = await contract.methods.approve(Config.DepositRepayContract[networkType], max).send(params);\n\n    return response\n}\n\nconst approveDepositSwapERC20 = async(web3, connectedAddress, networkType, market) => {\n\n    const contractABI = market.qToken.ABI;\n    const contractAddress = market.qToken.network[networkType].address;\n    let contract = await new web3.eth.Contract(contractABI, contractAddress);\n\n    const maxApproval = new BigNumber(2).pow(256).minus(1);\n\n    const gasInfo = await CoreData.getGasInfo(web3);\n\n    const max = maxApproval.toString(10);\n    let params = { from: connectedAddress };\n    params = await CoreData.recomputeGas(contract.methods.approve(Config.DepositSwapContract[networkType], max), params, gasInfo, networkType);\n    let response = await contract.methods.approve(Config.DepositSwapContract[networkType], max).send(params);\n\n    return response\n}\n\nconst approveLiquidateERC20 = async(web3, connectedAddress, networkType, market, version ='v1') => {\n\n    const contractABI = market.ABI;\n    const contractAddress = market.network[networkType].address;\n    let contract = await new web3.eth.Contract(contractABI, contractAddress);\n\n    const maxApproval = new BigNumber(2).pow(256).minus(1);\n\n    const gasInfo = await CoreData.getGasInfo(web3)\n\n    const approveAddress = version === 'v1' ? Config.LiquidateContract[networkType] : market.qToken.network[networkType].address;\n\n    const max = maxApproval.toString(10);\n    let params = { from: connectedAddress };\n    params = await CoreData.recomputeGas(contract.methods.approve(approveAddress, max), params, gasInfo, networkType);\n    let response = await contract.methods.approve(approveAddress, max).send(params);\n\n    return response\n}\n\nexport default {\n    approveERC20,\n    approveSwapRepayERC20,\n    approveLiquidateERC20,\n    approveDepositRepayERC20,\n    approveDepositSwapERC20\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CollateralModal\":\"CollateralModal_CollateralModal__2HBct\"};","module.exports = __webpack_public_path__ + \"static/media/supply_empty.a1898d88.svg\";","module.exports = __webpack_public_path__ + \"static/media/borrow_empty.052c36c1.svg\";","import React, {useContext, useState, useEffect, useRef} from 'react'\nimport { Button, Modal, Form } from 'react-bootstrap'\nimport { BigNumber } from 'bignumber.js'\nimport classNames from 'classnames'\nimport { useTranslation } from 'react-i18next'\nimport log from '../../../utils/logger'\nimport CoreData from '../../../methods/CoreData'\nimport { NetworkTypeContext, WalletAddressContext, Web3Context, DataContext } from '../../../context'\nimport { ModalSucAndFail, ModalInput, ModalTips, ModalPercent, ModalTipsAndCheckBox } from '../../../components/littleComponents'\nimport { validateDecimal } from '../../../utils/numberFormat'\n\nexport const WithdrawModal = (props) => {\n    const { connectedAddress } = useContext(WalletAddressContext)\n    const { networkType } = useContext(NetworkTypeContext)\n  const { web3, inSafe } = useContext(Web3Context)\n\n    const styles = props.styles;\n    const { t, i18n } = useTranslation();\n    const [inputValue, setInputValue] = useState('')\n    const [loading, setLoading] = useState(false)\n    const [withdrawSafeMax, setWithdrawSafeMax] = useState(true)\n    const [withdrawBtnDisabled, setWithdrawBtnDisabled] = useState(false)\n    const [withdrawCheck, setWithdrawCheck] = useState(false)\n    const [withdrawCompleted, setWithdrawCompleted] = useState(false)\n    const [withdrawFailed, setWithdrawFailed] = useState(false)\n    const [txnHash, setTxnHash] = useState('')\n    const [isMax, setIsMax] = useState(false)\n    const isUnMountedRef = useRef(false)\n\n    const decimalNum = 18\n\n    const savingsBalanceFormatted = new BigNumber(props.data.savingsBalanceFormatted) // 存款金额\n    const savingsBalanceFiat = new BigNumber(props.data.savingsBalanceFiat)\n    const totalloanbalance = new BigNumber(props.alldata.totalLoanBalance);\n    const totalborrowlimitfiat = new BigNumber(props.alldata.totalBorrowLimitFiat)\n   \n    const getAmount = (percent = 1) => {\n        let otherLoanBalance = totalborrowlimitfiat.minus(savingsBalanceFiat.multipliedBy(props.data.collateralFactor))\n        let amount = savingsBalanceFiat.minus(totalloanbalance.div(percent).minus(otherLoanBalance).div(props.data.collateralFactor))\n        amount = amount.div(props.data.price)\n        if(amount.lt(0)){\n            amount = new BigNumber(0)\n        }\n        if (savingsBalanceFormatted.lt(amount) || totalloanbalance.eq(0) || props.data.isAssetMember === false) {\n            // 存款金额<提取安全最大值 || 贷款金额为0 || 资产成员为false\n            amount = savingsBalanceFormatted;\n        }\n        return amount\n    }\n\n    const borrowLimit = 90\n    const withdrawMaxTotal = getAmount(borrowLimit * 0.01)\n    const withdrawAbove85 = getAmount(0.85)\n\n    const getPercent = (value = inputValue) => {\n        const inputV = Number(value)\n\n        if (inputV < 0) return;\n\n        let otherLoanBalance = totalborrowlimitfiat.minus(savingsBalanceFiat.multipliedBy(props.data.collateralFactor))\n        let changedLoanBalance = (savingsBalanceFiat.minus(inputV * props.data.price)).times(props.data.collateralFactor);\n        let temp = otherLoanBalance.plus(changedLoanBalance)\n        if (inputV == 0 || withdrawMaxTotal.isEqualTo(savingsBalanceFormatted)) {\n            temp = totalborrowlimitfiat;\n        }\n\n        let loanUsedPercent = totalloanbalance.div(temp).times(100)\n\n        if (loanUsedPercent < 0) {\n            loanUsedPercent = 100\n        }\n\n        let loanUsedPercentFixed2 = loanUsedPercent.toString(10)\n\n        if (!new BigNumber(loanUsedPercentFixed2).isFinite()) {\n            loanUsedPercentFixed2 = '0'\n        }\n\n        return loanUsedPercentFixed2\n    }\n\n    const loanUsedPercentFixed2 = Number(getPercent())\n\n\n    useEffect(() => {\n      if (Number(loanUsedPercentFixed2) > 85 && Number(loanUsedPercentFixed2) <= borrowLimit && BigNumber(inputValue).lte(withdrawMaxTotal) && !withdrawMaxTotal.isEqualTo(savingsBalanceFormatted)) {\n        setWithdrawBtnDisabled(!withdrawCheck)\n      }\n    }, [loanUsedPercentFixed2, borrowLimit, inputValue, withdrawMaxTotal, savingsBalanceFormatted, withdrawCheck])\n\n\n    const getRawValue = async(value) => {\n      return CoreData.getRawValue(web3, networkType, props.data.symbol, value)\n    }\n\n\n    const handleClose = async(closeModal = true, clearData = true) => {\n        if (clearData) {\n          setInputValue('')\n        }\n        setLoading(false)\n        setWithdrawSafeMax(true)\n        setWithdrawBtnDisabled(false)\n        setWithdrawCheck(false)\n        setWithdrawCompleted(false)\n        setWithdrawFailed(false)\n        setTxnHash('')\n        setIsMax(false)\n\n        if (closeModal) {\n          props.handleClose()\n          isUnMountedRef.current = true\n        }\n    }\n\n\n    const validateInput = async(isInput, value) => {\n        setIsMax(!isInput)\n        let inputValue = BigNumber(value).isNegative() ? BigNumber(value).absoluteValue().toString() : value\n\n        if (!validateDecimal(decimalNum).test(inputValue)) {\n          inputValue = BigNumber(inputValue).toFixed(decimalNum, 3)\n        } \n        setInputValue(inputValue)\n\n        const inputV = new BigNumber(inputValue)\n        if (inputV.lte(withdrawAbove85) || withdrawMaxTotal.isEqualTo(savingsBalanceFormatted)) {\n          // <=85%\n          setWithdrawBtnDisabled(false)\n        } else if (inputV.gt(withdrawAbove85) && inputV.lte(withdrawMaxTotal)) {\n          // >85% && <=99\n          setWithdrawBtnDisabled(!withdrawCheck)\n        } else {\n          // >99%\n          setWithdrawBtnDisabled(true)\n        }\n    }\n\n    const handleWithdraw = async(handleUpdate) => {\n        const gtagParams = {\n            url: window.location.href,\n            symbol: props.data.symbol,\n        }\n        setLoading(true)\n        const withdrawAmount = inputValue\n        const contract = await CoreData.getQTokenContract(web3, networkType, props.data.symbol)\n        const gasInfo = await CoreData.getGasInfo(web3)\n        let rawWithdrawAmount\n        let redeemFunction = contract.methods.redeemUnderlying\n        if (`${withdrawAmount}` === savingsBalanceFormatted.toString(10)) {\n            rawWithdrawAmount = props.data.savingsCTokenBalance\n            redeemFunction = contract.methods.redeem\n        } else {\n            rawWithdrawAmount = await getRawValue(withdrawAmount)\n        }\n\n      let params = { from: connectedAddress }\n      if (!inSafe) {\n        params = await CoreData.recomputeGas(redeemFunction(rawWithdrawAmount), params, gasInfo, networkType);\n      }\n\n      await redeemFunction(rawWithdrawAmount).send(params)\n        .on('transactionHash', function(hash) {\n            props.data.withdrawTxnHash = {\n              hash,\n              content: t('Pending.WithdrawInProgress')\n            }\n            if (!isUnMountedRef.current) {\n              setTxnHash(hash)\n            }\n        })\n        .then(response => {\n            if(response.events.Failure) {\n                window.gtag('event', 'withdraw', {\n                    ...gtagParams,\n                    error: 'response event fail'\n                })\n                if (!isUnMountedRef.current) {\n                  setWithdrawFailed(true)\n                  setLoading(false)\n                }\n            } else {\n                window.gtag('event', 'withdraw', gtagParams)\n                if (!isUnMountedRef.current) {\n                  handleUpdate()\n                  setWithdrawCompleted(true)\n                  setLoading(false)\n                }\n            }\n            props.data.withdrawTxnHash = null\n        })\n        .catch(error => {\n            log.error(error)\n            if(error.code === 4001) {\n                window.gtag('event', 'withdraw', {\n                    ...gtagParams,\n                    error: 'user rejected'\n                })\n                if (!isUnMountedRef.current) {\n                  handleClose(false, false)\n                }\n            } else {\n                window.gtag('event', 'withdraw', {\n                    ...gtagParams,\n                    error: 'other error'\n                })\n                if (!isUnMountedRef.current) {\n                  setWithdrawFailed(true)\n                  setLoading(false)\n                }\n                props.data.withdrawTxnHash = null\n            }\n            \n        })\n    }\n\n    //UI Rendering\n\n    const FooterList = () => {\n      const max = withdrawMaxTotal.lte(0) ? 0 : Number(withdrawMaxTotal)\n      const safeMax = withdrawAbove85.lte(0) ? 0 : Number(withdrawAbove85)\n      return (\n        <div className=\"footerList\">\n          <div className=\"footerItem\">\n              <div className=\"label\">{t('Banking.WithdrawModal.Maximum')}</div>\n              <div className=\"value\">\n                {`${max === 0 ? max.toFixed(2) : max.toFixed(8)} ${props.data.symbol}`}\n              </div>\n          </div>\n          <div className=\"footerItem\">\n              <div className=\"label\">{t('Banking.WithdrawModal.SafeMaximum')}</div>\n              <div className=\"value\">\n                {`${safeMax === 0 ? safeMax.toFixed(2) : safeMax.toFixed(8)} ${props.data.symbol}`}\n              </div>\n          </div>\n        </div>\n      )\n    }\n\n\n    const TxnSuccessMsg =\n    <ModalSucAndFail \n        type=\"success\"\n        txnHash={txnHash}\n        content={t('Banking.WithdrawModal.SuccessMsg')}\n        okText='OK'\n        handleOk={() => handleClose(Number(props.data.savingsBalance) <= 0)}\n        footerList={FooterList()}\n    />\n\n    const TxnErrorMsg =\n    <DataContext.Consumer>\n      {\n        ({handleUpdate}) => (\n          <ModalSucAndFail \n            type=\"error\"\n            txnHash={txnHash}\n            title={t('Banking.WithdrawModal.ErrorMsg')}\n            okText={t('CommonModal.Retry')}\n            handleOk={() => handleWithdraw(handleUpdate)}\n            footerList={FooterList()}\n          />\n        )\n      }\n    </DataContext.Consumer>\n\n\n    const ModalLoading = \n    <ModalSucAndFail \n        type=\"loading\"\n        txnHash={txnHash}\n        title={t('CommonModal.PleaseWait')}\n    />\n\n\n    const ModalWithdrawForm = () => {\n      return (\n        <div className=\"contentContainer\">\n          <div className=\"formContainer\">\n              <div className=\"formHdTips\">\n                {t('CommonModal.formHdTips', {\n                  symbol: props?.data?.symbol,\n                  action: t('Banking.Withdraw').toLowerCase()\n                })}\n              </div>\n              <ModalInput\n                  controlId=\"formWithdraw\"\n                  data={props.data}\n                  inputValue={inputValue}\n                  showMax={true}\n                  onChange={e => validateInput(true, e.target.value)}\n                  maxOnClick={() => validateInput(false, withdrawAbove85)}\n              />\n              <ModalPercent\n                percent={loanUsedPercentFixed2.toFixed(2)}\n                tips={t('Banking.WithdrawModal.InfoText')}\n              />\n              {\n                (Number(loanUsedPercentFixed2) > 85 && Number(loanUsedPercentFixed2) <= borrowLimit && BigNumber(inputValue).lte(withdrawMaxTotal) && !withdrawMaxTotal.isEqualTo(savingsBalanceFormatted)) && (\n                  <ModalTipsAndCheckBox\n                    type={'warningTips'}\n                    content={t('Banking.WithdrawModal.BorrowCheckTips')}\n                    checkId={'withdrawCheck'}\n                    checked={withdrawCheck}\n                    onChange={() => setWithdrawCheck(v => !v)}\n                  />\n                )\n              }\n              {\n                (loanUsedPercentFixed2 > borrowLimit || BigNumber(inputValue).gt(withdrawMaxTotal)) && (\n                  <ModalTips \n                    smallIconTips={true}\n                    showTitle={false}\n                    type={'errorTips'} \n                    content={t('Banking.WithdrawModal.InsufficientBalance')}\n                  />\n                )\n              }\n          </div>\n          <div className=\"buttonsContainer\">\n            <DataContext.Consumer>\n              {\n                ({handleUpdate}) => (\n                  <Button \n                    variant=\"green\" \n                    disabled={withdrawBtnDisabled || isNaN(Number(inputValue)) || Number(inputValue) <= 0 || Number(inputValue) > Number(withdrawMaxTotal)}\n                    onClick={() => handleWithdraw(handleUpdate)}\n                  >\n                    {t('Banking.Withdraw')}\n                  </Button>\n                )\n              }\n            </DataContext.Consumer>\n\n          </div>\n          {FooterList()}\n        </div>\n      )\n    }\n\n    return loading ? ModalLoading : \n              withdrawCompleted ? TxnSuccessMsg : \n                  withdrawFailed ? TxnErrorMsg : ModalWithdrawForm()\n}\n","import React, { useContext, useState, useEffect } from 'react'\nimport { Modal, Tab, Nav } from 'react-bootstrap'\nimport classNames from 'classnames'\nimport { useTranslation } from 'react-i18next'\nimport { BigNumber } from 'bignumber.js'\nimport CoreMethod from '../../methods/CoreMethod'\nimport CoreData from '../../methods/CoreData'\nimport FetchData from '../../methods/FetchData'\nimport { ModalHeader } from '../littleComponents'\nimport { NetworkTypeContext, WalletAddressContext, Web3Context } from '../../context'\nimport Config from '../../utils/config'\n\nimport { WithdrawModal } from '../subComponents/WithdrawModalV2/WithdrawModal' // 取款\n// import { DepositSwapModal } from '..//subComponents/WithdrawModalV2/DepositSwapModal' // 存款交换\n// import { LPTokenRewardsModal } from '../subComponents/LPTokenRewardsModalV2/LPTokenRewardsModal' // 收益\n\n\nfunction SavingsModalAll(props) {\n    const { connectedAddress } = useContext(WalletAddressContext)\n    const { networkType } = useContext(NetworkTypeContext)\n    const { web3 } = useContext(Web3Context)\n    const { t, i18n } = useTranslation()\n    const [tabKey, setTabKey] =  useState('tab1')\n    const [swapData, setSwapData] = useState([])\n    const [swapAsset, setSwapAsset] = useState()\n\n    useEffect(() => {\n        if (!swapAsset) {\n          let data = props.alldata.filter((d) => {\n            if (d.isLPToken || d.symbol === props.data.symbol) {\n                return false\n            } else {\n                return true\n            }\n          })\n          data.sort((a,b) => b.savingsBalanceFormatted - a.savingsBalanceFormatted)\n          setSwapData(data)\n          setSwapAsset(data[0])\n        }\n      }, [props.alldata, props.data])\n\n    const handleClose = (type) => {\n        setTabKey('tab1')\n        props.onHide(type)\n    }\n\n    // render UI\n    return(\n        <Modal\n            {...props}\n            aria-labelledby=\"contained-modal-title-vcenter\"\n            className=\"customModal\"\n            centered\n        >\n            <Modal.Header closeButton>\n                <ModalHeader \n                    data={props.data}\n                />\n            </Modal.Header>\n            <Modal.Body>\n                <Tab.Container id=\"supply-borrow\" defaultActiveKey={tabKey} onSelect={(key) => {\n                    setTabKey(key)\n                }}>\n                    <Nav variant=\"pills\" className=\"flex-row\">\n                        <Nav.Item>\n                            <Nav.Link eventKey=\"tab1\">{t('Banking.Withdraw')}</Nav.Link>\n                        </Nav.Item>\n                        {/* {\n                            props.data.isLPToken ?\n                            <Nav.Item>\n                                <Nav.Link eventKey=\"tab2\">{t('Common.Redeem.Rewards')}</Nav.Link>\n                            </Nav.Item>\n                            : swapData.length > 0 &&\n                            <Nav.Item>\n                                <Nav.Link eventKey=\"tab2\">{t('Common.Exchange')}</Nav.Link>\n                            </Nav.Item>\n                        } */}\n                    </Nav>\n                    <Tab.Content>\n                        {\n                            tabKey === 'tab1' && (\n                                <Tab.Pane eventKey=\"tab1\">\n                                    <WithdrawModal\n                                        handleClose={() => handleClose('withdraw')}\n                                        data={props.data}\n                                        alldata={props.alldata}\n                                    /> \n                                </Tab.Pane>\n                            )\n                        }\n                        {/* {\n                            tabKey === 'tab2' && (\n                                props.data.isLPToken ? \n                                <Tab.Pane eventKey=\"tab2\">\n                                    <LPTokenRewardsModal\n                                        data={props.data}\n                                        handleClose={handleClose}\n                                    />\n                                </Tab.Pane>\n                                : swapData.length > 0 &&\n                                <Tab.Pane eventKey=\"tab2\">\n                                    <DepositSwapModal \n                                        swapData={swapData}\n                                        swapAsset={swapAsset}\n                                        handleSelectAsset={(asset) => setSwapAsset(asset)}\n                                        \n                                        data={props.data}\n                                        alldata={props.alldata}\n                                        handleClose={handleClose}\n                                    />\n                                </Tab.Pane>\n                            )\n                        } */}\n                    </Tab.Content>\n                </Tab.Container>\n            </Modal.Body>\n        </Modal>\n    )\n}\n\nexport default SavingsModalAll","import React, { useContext, useState, useRef } from 'react'\nimport { Button, Modal, Form } from 'react-bootstrap'\nimport { BigNumber } from 'bignumber.js'\nimport classNames from 'classnames'\nimport log from '../../../utils/logger'\nimport { useTranslation } from 'react-i18next'\nimport CoreMethod from '../../../methods/CoreMethod'\nimport CoreData from '../../../methods/CoreData'\nimport FetchData from '../../../methods/FetchData'\nimport { sleep } from '../../../utils/promise'\nimport { NetworkTypeContext, WalletAddressContext, Web3Context, DataContext } from '../../../context'\nimport { ModalSucAndFail, ModalInput, ModalTips } from '../../../components/littleComponents'\nimport { validateDecimal } from '../../../utils/numberFormat'\n\n\nexport const RepayModal = (props) => {\n    const { connectedAddress } = useContext(WalletAddressContext)\n    const { networkType } = useContext(NetworkTypeContext)\n  const { web3, inSafe } = useContext(Web3Context)\n\n    const styles = props.styles\n    const { t, i18n } = useTranslation()\n    const [inputValue, setInputValue] = useState('')\n    const [overPay, setOverPay] = useState(false)\n    const [loading, setLoading] = useState(false)\n    const [lowBalance, setLowBalance] = useState(false)\n    const [repayCompleted, setRepayCompleted] = useState(false)\n    const [repayFailed, setRepayFailed] = useState(false)\n    const [txnHash, setTxnHash] = useState('')\n    const [needsFurtherApproval, setNeedsFurtherApproval] = useState(false)\n    const [allowanceFormatted, setAllowanceFormatted] = useState('')\n    const [isMax, setIsMax] = useState(false)\n    const [firstApproval, setFirstApproval] = useState(true)\n    const isUnMountedRef = useRef(false)\n    const decimalNum = 18\n\n    const validateInput = async (value) => {\n        resetErrorTips()\n        setIsMax(false)\n\n        let inputValue = BigNumber(value).isNegative() ? BigNumber(value).absoluteValue().toString() : value\n\n        if (!validateDecimal(decimalNum).test(inputValue)) {\n          inputValue = BigNumber(inputValue).toFixed(decimalNum, 3)\n        } \n        setInputValue(inputValue)\n\n        setOverPay(parseFloat(props.data.loanBalance) < parseFloat(inputValue))\n        setLowBalance(parseFloat(props.data.walletBalance) < parseFloat(inputValue))\n    }\n\n    const getRawValue = async (value) => {\n        return CoreData.getRawValue(web3, networkType, props.data.symbol, value)\n    }\n\n    const resetErrorTips = () => {\n      setOverPay(false)\n      setLowBalance(false)\n    }\n\n    const handleClose = async (closeModal = true, clearData = true) => {\n        if (clearData) {\n          setInputValue('')\n        }\n        resetErrorTips()\n        setLoading(false)\n        setRepayCompleted(false)\n        setRepayFailed(false)\n        setTxnHash('')\n        setNeedsFurtherApproval(false)\n        setAllowanceFormatted('')\n        setIsMax(false)\n        setFirstApproval(true)\n        if (closeModal) {\n          props.handleClose()\n          isUnMountedRef.current = true\n        }\n    }\n\n    const verifyFurtherApproval = async (txnValue) => {\n        if (!CoreData.isNativeToken(props.data.symbol, networkType)) {\n            const { allowance, allowanceFormatted } = await FetchData.getAccountAllowance(web3, connectedAddress, networkType, props.data)\n            if (allowance && allowance < Number(txnValue)) {\n                setNeedsFurtherApproval(true)\n                setAllowanceFormatted(allowanceFormatted)\n                return Promise.resolve(false)\n            }\n    \n        }\n\n        setNeedsFurtherApproval(false)\n        setAllowanceFormatted('')\n        return Promise.resolve(true)\n    }\n\n    const setMaximum = async (fullPayOnly) => {\n        let loanRepayAmount = props.data.loanBalanceFormatted;\n        if (BigNumber(props.data.walletBalance).gte(BigNumber(props.data.loanBalance))) {\n            // max all\n            setIsMax(true)\n        } else {\n            // max part\n            setIsMax(false)\n            loanRepayAmount = props.data.walletBalanceFormatted;\n        }\n        resetErrorTips()\n\n        let inputValue = loanRepayAmount.toString()\n        if (!validateDecimal(decimalNum).test(inputValue)) {\n          inputValue = BigNumber(inputValue).toFixed(decimalNum, 3)\n        }\n\n        setInputValue(inputValue)\n    }\n\n\n\n    const handleRepay = async (handleUpdate) => {\n        const gtagParams = {\n            url: window.location.href,\n            symbol: props.data.symbol,\n        }\n        setFirstApproval(true)\n\n        if(lowBalance || overPay ) return;\n\n        setLoading(true)\n        let repayAmount = isMax ? new BigNumber(2).pow(256).minus(1).toString(10) : await getRawValue(inputValue);\n\n        const isValidAllowance = await verifyFurtherApproval(repayAmount)\n        if (!isValidAllowance) {\n            setLoading(false)\n            return\n        }\n\n        const contract = await CoreData.getQTokenContract(web3, networkType, props.data.symbol)\n        const gasInfo = await CoreData.getGasInfo(web3)\n        const isNativeToken = CoreData.isNativeToken(props.data.symbol, networkType)\n        let repayBorrow\n        \n        if (isNativeToken) {\n            if (isMax) {\n                repayAmount = BigNumber(props.data.loanBalance).multipliedBy(1.00001).plus(1).toFixed(0)\n                const maximillionContract = await CoreData.getMaximillion(web3, networkType)\n                repayBorrow = await maximillionContract.methods.repayBehalf(connectedAddress)\n            } else {\n                repayBorrow = await contract.methods.repayBorrow()\n            }\n        } else {\n            repayBorrow = await contract.methods.repayBorrow(web3.utils.toBN(repayAmount))\n        }\n\n      let sendParams = { from: connectedAddress };\n\n      isNativeToken && (sendParams.value = repayAmount);\n\n      if(!inSafe){\n        sendParams = await CoreData.recomputeGas(repayBorrow, sendParams, gasInfo, networkType);\n      }\n      \n        repayBorrow.send(sendParams).on('transactionHash', function (hash) {\n            props.data.repayTxnHash = {\n              hash,\n              content: t('Pending.RepayInProgress')\n            }\n            if (!isUnMountedRef.current) {\n              setTxnHash(hash)\n            }\n        })\n        .then(response => {\n            if (response.events.Failure) {\n                window.gtag('event', 'repay', {\n                    ...gtagParams,\n                    error: 'response event fail'\n                })\n                if (!isUnMountedRef.current) {\n                  setRepayFailed(true)\n                  setLoading(false)\n                }\n            } else {\n                window.gtag('event', 'repay', gtagParams)\n                if (!isUnMountedRef.current) {\n                  handleUpdate()\n                  setRepayCompleted(true)\n                  setLoading(false)\n              }\n            }\n            props.data.repayTxnHash = null\n        })\n        .catch(error => {\n            if (error.code === 4001) {\n                window.gtag('event', 'repay', {\n                    ...gtagParams,\n                    error: 'user rejected'\n                })\n                if (!isUnMountedRef.current) {\n                  handleClose(false, false)\n                }\n            } else {\n                window.gtag('event', 'repay', {\n                    ...gtagParams,\n                    error: 'other error'\n                })\n                if (!isUnMountedRef.current) {\n                  setRepayFailed(true)\n                  setLoading(false)\n                }\n                props.data.repayTxnHash = null\n            }\n        })\n    }\n\n    const handleApprove = async (first = true) => {\n        setLoading(true)\n        await CoreMethod.approveERC20(web3, connectedAddress, networkType, props.data)\n            .then(async response => {\n                if (response) {\n                    if (first) {\n                        setFirstApproval(false)\n                    } else {\n                        const txnValue = await getRawValue(inputValue)\n                        await sleep()\n                        const isValidAllowance = await verifyFurtherApproval(txnValue)\n                        isValidAllowance && setFirstApproval(false)\n                    }\n                }\n                setLoading(false)\n            })\n            .catch(error => {\n                if (error.code === 4001) {\n                    handleClose(false, false)\n                }\n            })\n    }\n\n\n\n    // render UI\n\n    const FooterList = () => {\n      const loanBalanceFormatted = Number(props.data.loanBalanceFormatted)\n      const walletBalanceFormatted = Number(props.data.walletBalanceFormatted)\n      return (\n        <div className=\"footerList\">\n            <div className=\"footerItem\">\n                <div className=\"label\">{t('Banking.RepayModal.LoanBalance')}</div>\n                <div className=\"value\">\n                  {\n                    `${loanBalanceFormatted === 0 ? loanBalanceFormatted.toFixed(2) : loanBalanceFormatted.toFixed(8)} ${props.data.symbol}`\n                  }\n                </div>\n            </div>\n            <div className=\"footerItem\">\n                <div className=\"label\">{t('CommonModal.WalletBalance')}</div>\n                <div className=\"value\">\n                  {\n                    `${walletBalanceFormatted === 0 ? walletBalanceFormatted.toFixed(2) : walletBalanceFormatted.toFixed(8)} ${props.data.symbol}`\n                  }\n                </div>\n            </div>\n        </div>\n      )\n    }\n\n    const ModalLoading = \n    <ModalSucAndFail \n        type=\"loading\"\n        txnHash={txnHash}\n        title={t('CommonModal.PleaseWait')}\n    />\n\n    const TxnSuccessMsg =\n      <ModalSucAndFail \n        type=\"success\"\n        txnHash={txnHash}\n        content={t('Banking.RepayModal.SuccessMsg')}\n        okText='OK'\n        handleOk={() => handleClose(Number(props.data.loanBalance) <= 0)}\n        footerList={FooterList()}\n      />\n\n    const TxnErrorMsg =\n      <DataContext.Consumer>\n        {\n          ({handleUpdate}) => (\n            <ModalSucAndFail \n              type=\"error\"\n              txnHash={txnHash}\n              title={t('Banking.RepayModal.ErrorMsg')}\n              okText={t('CommonModal.Retry')}\n              handleOk={() => handleRepay(handleUpdate)}\n              footerList={FooterList()}\n            />\n          )\n        }\n      </DataContext.Consumer>\n\n\n\n    const ModalApprovalRequest = \n    <ModalSucAndFail \n        type=\"approve\"\n        showTitle={false}\n        showTransation={false}\n        content={t('CommonModal.ApprovalMsg', {token: CoreData.getApprovalMsgToken(networkType)})}\n        okText={t('CommonModal.Approve')}\n        handleOk={() => handleApprove(true)}\n    />\n\n    const ModalFurtherApprovalRequest =\n    <ModalSucAndFail \n        type=\"approve\"\n        showTitle={false}\n        showTransation={false}\n        content={t('CommonModal.FurtherApprovalMsg', { type: t('Banking.RepayModal.RepayAmount'), inputValue, allowanceFormatted })}\n        okText={t('CommonModal.FurtherApprove')}\n        handleOk={() => handleApprove(false)}\n    />\n\n    const RepayButton =\n      (overPay || lowBalance || isNaN(parseFloat(inputValue)) || parseFloat(inputValue) <= 0) ?\n          <Button className=\"confirmBtn\" disabled>\n            {CoreData.toUpperCase(i18n.language, t('Common.Repay'))}\n          </Button> :\n          <Button className=\"confirmBtn\" onClick={() => handleRepay()}>\n            {CoreData.toUpperCase(i18n.language, t('Common.Repay'))}\n          </Button>\n\n    const ModalRepayForm = () => {\n      return (\n        <div className=\"contentContainer\">\n          <div className=\"formContainer\">\n            <div className=\"formHdTips\">\n              {t('CommonModal.formHdTips', {\n                symbol: props?.data?.symbol,\n                action: t('Banking.Repay').toLowerCase()\n              })}\n            </div>\n            <ModalInput\n              controlId=\"formDeposit\"\n              data={props.data}\n              inputValue={inputValue}\n              showMax={true}\n              onChange={e => validateInput(e.target.value)}\n              maxOnClick={() => setMaximum(false)}\n            />\n            <div style={{width: '100%', marginTop: '23px'}}>\n              {overPay ? (\n                <ModalTips \n                  smallIconTips={true}\n                  showTitle={false}\n                  type={'errorTips'} \n                  content={t('Banking.RepayModal.OverPayError')}\n                />\n              ) : lowBalance ? (\n                <ModalTips \n                  smallIconTips={true}\n                  showTitle={false}\n                  type={'errorTips'} \n                  content={t('Banking.RepayModal.LowBalanceError')}\n                />\n              ) : ''}\n            </div>\n          </div>\n          <div className=\"buttonsContainer\">\n            <DataContext.Consumer>\n              {\n                ({handleUpdate}) => (\n                  <Button \n                    variant=\"green\" \n                    disabled={overPay || lowBalance || isNaN(parseFloat(inputValue)) || parseFloat(inputValue) <= 0}\n                    onClick={() => handleRepay(handleUpdate)}\n                  >\n                    {t('Banking.Repay')}\n                  </Button>\n                )\n              }\n            </DataContext.Consumer>\n          </div>\n            {FooterList()}\n        </div>\n      )\n    }\n\n    const needsApproval = props.data && !(props.data.approved) && firstApproval\n    const ModalLoaded = needsApproval ? ModalApprovalRequest : ModalRepayForm()\n    const ModalRendered = needsFurtherApproval ? ModalFurtherApprovalRequest : ModalLoaded\n\n    return loading ? ModalLoading : \n              repayCompleted ? TxnSuccessMsg : \n                  repayFailed ? TxnErrorMsg : ModalRendered\n}\n","import React, { useContext, useState, useEffect } from 'react'\nimport { Modal, Tab, Nav } from 'react-bootstrap'\nimport classNames from 'classnames'\nimport { useTranslation } from 'react-i18next'\nimport { BigNumber } from 'bignumber.js'\nimport CoreMethod from '../../methods/CoreMethod'\nimport CoreData from '../../methods/CoreData'\nimport FetchData from '../../methods/FetchData'\nimport Config from '../../utils/config'\nimport { ModalHeader } from '../littleComponents'\nimport { NetworkTypeContext, WalletAddressContext, Web3Context } from '../../context'\nimport { RepayModal } from '../subComponents/RepayModalV2/RepayModal' // 还款\n// import { SwapRepayModal } from '../subComponents/RepayModalV2/SwapRepayModal' // 换币还款\n\nfunction RepayModalAll(props) {\n    const { connectedAddress } = useContext(WalletAddressContext)\n    const { networkType } = useContext(NetworkTypeContext)\n    const { web3 } = useContext(Web3Context)\n    const { t, i18n } = useTranslation()\n    const [tabKey, setTabKey] =  useState('tab1')\n    const [swapWalletList, setSwapWalletList] = useState([])\n    const [swapWalletAsset, setSwapWalletAsset] = useState()\n    const [swapSavingList, setSwapSavingList] = useState([])\n    const [swapSavingAsset, setSwapSavingAsset] = useState()\n\n    useEffect(() => {\n      if (!swapWalletAsset && Config.SwapRepayContract[networkType]) {\n        // 换币还款\n        let walletData = props.alldata.filter((d) => {\n            return parseFloat(d.walletBalance) > 0 && !d.isLPToken\n        })\n        walletData.sort((a,b) => b.savingsBalanceFormatted - a.savingsBalanceFormatted)\n        setSwapWalletList(walletData)\n        setSwapWalletAsset(walletData[0])\n      } else if (!swapSavingAsset && Config.DepositRepayContract[networkType]) {\n        // 存款还借款\n        let savingData = props.allData.filter((d) => {\n            return parseFloat(d.savingsBalance) > 0 && !d.isLPToken\n        })\n        savingData.sort((a,b) => b.savingsBalanceFormatted - a.savingsBalanceFormatted)\n        setSwapSavingList(savingData)\n        setSwapSavingAsset(savingData[0])\n      }\n\n    }, [props.alldata, props.data])\n\n    const handleClose = (type) => {\n        setTabKey('tab1')\n        props.onHide(type)\n    }\n\n    const handleSelectAsset = async (asset) => {\n        switch (tabKey) {\n            case 'tab2': \n                setSwapWalletAsset(asset)\n                break;\n            case 'tab3': \n                setSwapSavingAsset(asset)\n                break;\n        }\n    }\n\n    // render UI\n    return(\n        <Modal\n            {...props}\n            aria-labelledby=\"contained-modal-title-vcenter\"\n            className=\"customModal\"\n            centered\n        >\n            <Modal.Header closeButton>\n                <ModalHeader \n                    data={props.data}\n                />\n            </Modal.Header>\n            <Modal.Body>\n                <Tab.Container id=\"supply-borrow\" defaultActiveKey={tabKey} onSelect={(key) => {\n                    setTabKey(key)\n                }}>\n                    <Nav variant=\"pills\" className=\"flex-row\">\n                        <Nav.Item>\n                            <Nav.Link eventKey=\"tab1\">{t('Banking.Repay')}</Nav.Link>\n                        </Nav.Item>\n                        {/* {\n                            swapWalletList.length > 0 && (\n                                <Nav.Item>\n                                    <Nav.Link eventKey=\"tab2\">{t('Common.SwapRepay')}</Nav.Link>\n                                </Nav.Item>\n                            )\n                        } */}\n                        {/* {\n                            swapSavingList.length > 0 && (\n                                <Nav.Item>\n                                    <Nav.Link eventKey=\"tab3\">{t('Common.DepositRepay')}</Nav.Link>\n                                </Nav.Item>\n                            )\n                        } */}\n                    </Nav>\n                    <Tab.Content>\n                        {\n                            tabKey === 'tab1' && (\n                                <Tab.Pane eventKey=\"tab1\">\n                                    <RepayModal\n                                        handleClose={() => handleClose('repay')}\n                                        data={props.data}\n                                        totalborrowlimitfiat={props.totalborrowlimitfiat}\n                                        totalloanbalance={props.totalloanbalance}\n                                    /> \n                                </Tab.Pane>\n                            )\n                        }\n                        {/* {\n                            tabKey === 'tab2' && swapWalletList.length > 0 && (\n                                <Tab.Pane eventKey=\"tab2\">\n                                    <SwapRepayModal\n                                        data={props.data}\n                                        alldata={props.alldata}\n                                        swapAsset={swapWalletAsset}\n                                        swapData={swapWalletList}\n                                        handleSelectAsset={handleSelectAsset}\n                                        handleClose={handleClose}\n                                    /> \n                                </Tab.Pane>\n                            )\n                        } */}\n                        {/* {\n                            tabKey === 'tab3' && swapSavingList.length > 0 && (\n                                <Tab.Pane eventKey=\"tab3\">\n                                    <SwapRepayModal\n                                        data={props.data}\n                                        alldata={props.alldata}\n                                        swapAsset={swapSavingAsset}\n                                        swapData={swapSavingList}\n                                        handleSelectAsset={handleSelectAsset}\n                                        handleClose={handleClose}\n                                    /> \n                                </Tab.Pane>\n                            )\n                        } */}\n                    </Tab.Content>\n                </Tab.Container>\n            </Modal.Body>\n        </Modal>\n    )\n}\n\nexport default RepayModalAll","import React, { useState } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { Modal } from 'react-bootstrap'\nimport classNames from 'classnames'\nimport { ModalSucAndFail, ModalHeader } from '../../components/littleComponents'\nimport styles from './CollateralModal.module.scss'\n\nfunction CollateralModal(props) {\n\n    const { t, i18n } = useTranslation()\n\n    return(\n        <Modal\n            {...props}\n            aria-labelledby=\"contained-modal-title-vcenter\"\n            className={classNames(\"customModal\", styles.CollateralModal)}\n            centered\n        >\n            <Modal.Header closeButton>\n                <ModalHeader \n                    data={props.data}\n                />\n            </Modal.Header>\n            <Modal.Body>\n                <div>\n                    <ModalSucAndFail \n                        type={'error'}\n                        title={t('Banking.CollateralModal.title')}\n                        content={t('Banking.CollateralModal.content')}\n                        showTransation={false}\n                    />\n                </div>\n            </Modal.Body>\n        </Modal>\n    )\n}\n\nexport default CollateralModal","import React, {useContext, useState, useRef, useEffect} from 'react'\nimport {Table, Container, Nav, Tab, Row, Col, Button, Form, Modal, Dropdown, OverlayTrigger, Tooltip} from 'react-bootstrap'\nimport classNames from 'classnames'\nimport { BigNumber } from 'bignumber.js'\nimport { useTranslation } from 'react-i18next'\nimport ContentLoader from 'react-content-loader'\nimport {cloneDeep, findIndex} from 'lodash-es'\nimport log from '../../utils/logger'\nimport Config from '../../utils/config'\nimport FetchData from '../../methods/FetchData'\nimport CoreData from '../../methods/CoreData'\nimport { loadingColors } from '../../utils/color'\nimport { NetworkTypeContext, WalletAddressContext, Web3Context, DataContext } from '../../context'\nimport { PendingHash, TwinLogo, TorTooltip } from '../../components/littleComponents'\nimport SavingsModalAll from '../modals/SavingsModalAll' // 取款 | 交换 | 收益（LP）\nimport RepayModalAll from '../modals/RepayModalAll' // 还款\nimport CollateralModal from '../modals/CollateralModal' // 抵押\nimport SupplyEmptyImage from '../../images/freshBank/supply_empty.svg'\nimport BorrowEmptyImage from '../../images/freshBank/borrow_empty.svg'\n\nconst Accounts = ({\n  styles,\n  ...props\n}) => {\n  const { connectedAddress } = useContext(WalletAddressContext)\n  const { networkType } = useContext(NetworkTypeContext)\n  const { web3 } = useContext(Web3Context)\n  const { t, i18n } = useTranslation()\n  const [showRepayModal, setShowRepayModal] = useState(false)\n  const [showWithdrawModal, setShowWithdrawModal] = useState(false)\n\n  const [showCollateralErrorModal, setShowCollateralErrorModal] = useState(false)\n  const [modalMarketIndex, setModalMarketIndex] = useState(0)\n  const [savingSort, setSavingSort] = useState({\n    field: '',\n    direction: 'default'\n  })\n  const [loanSort, setLoanSort] = useState({\n    field: '',\n    direction: 'default'\n  })\n  const [curSavingList, setSavingCurList] = useState([])\n  const [curLoanList, setCurLoanList] = useState([])\n  const [collateralLoading, setCollateralLoading] = useState([])\n  const [collateralHash, setCollateralHash] = useState([])\n  const [collateralStatus, setCollateralStatus] = useState([])\n\n  let loading = networkType === \"unsupported\" ? false : (props.data.loading == undefined || connectedAddress == undefined) ? true : props.data.loading\n\n\n  useEffect(() => {\n    if (props?.data) {\n      console.log(props.data)\n      let savingList = cloneDeep(props.data)\n      let loanList = cloneDeep(props.data)\n      if (savingSort.direction !== 'default') {\n        savingList = sortData('saving', savingList, savingSort.field, savingSort.direction)\n      }\n      if (loanSort.direction !== 'default') {\n        loanList = sortData('loan', loanList, loanSort.field, loanSort.direction)\n      }\n      setSavingCurList(savingList)\n      setCurLoanList(loanList)\n\n      const collateralStatus = savingList.map(item => item.collateralStatus)\n      setCollateralStatus(collateralStatus)\n    }\n  }, [props.data])\n\n\n  const handleClose = (mode) => {\n    switch(mode) {\n      case 'repay':\n        setShowRepayModal(false)\n        break;\n      case 'withdraw':\n        setShowWithdrawModal(false)\n        break;\n    }\n  }\n  const handleShow = (mode, i) => {\n    setModalMarketIndex(i)\n    switch(mode) {\n      case 'repay':\n        setShowRepayModal(true)\n        break;\n      case 'withdraw':\n        setShowWithdrawModal(true)\n        break;\n    }\n  }\n\n\n  const getCData = (index, data, value) => {\n    const cloneData = [...data]\n    cloneData[index] = value\n    return cloneData\n  }\n\n\n\n  const handleCollateral = async(market, index, handleUpdate) => {\n    const gtagParams = {\n      url: window.location.href,\n      symbol: market.symbol,\n    }\n    setModalMarketIndex(index)\n    \n    setCollateralLoading(getCData(index, collateralLoading, true))\n    setCollateralHash(getCData(index, collateralHash, null))\n\n    const gasInfo = await CoreData.getGasInfo(web3)\n    const comptroller =  await CoreData.getComptroller(web3, networkType)\n    const marketAddress = market.qToken.network[networkType].address\n\n    if(collateralStatus[index]) {\n      // 禁用\n      await comptroller.methods.exitMarket(marketAddress).send({\n        from: connectedAddress,\n        gasLimit: web3.utils.toHex(gasInfo.gasLimit),     // posted at compound.finance/developers#gas-costs\n        gasPrice: web3.utils.toHex(gasInfo.gasPrice) // use ethgasstation.info (mainnet only)\n      })\n      .on('transactionHash', function(hash) {\n        setCollateralHash(getCData(index, collateralHash, hash))\n      })\n      .then(response => {\n        handleUpdate()\n        setCollateralLoading(getCData(index, collateralLoading, false))\n        setCollateralHash(getCData(index, collateralHash, null))\n\n        if(response.events.Failure) {\n          window.gtag('event', 'CloseCollateral', {\n            ...gtagParams,\n            error: 'response event fail'\n          })\n          setShowCollateralErrorModal(true)\n        } else {\n          window.gtag('event', 'CloseCollateral', gtagParams)\n          setCollateralStatus(getCData(index, collateralStatus, false))\n        }\n      })\n      .catch(error => {\n        window.gtag('event', 'CloseCollateral', {\n          ...gtagParams,\n          error: error.code === 4001 ? 'user rejected' : 'other error'\n        })\n        setCollateralLoading(getCData(index, collateralLoading, false))\n        setCollateralHash(getCData(index, collateralHash, null))\n      })\n    }\n    else {\n      // 启用\n      await comptroller.methods.enterMarkets([marketAddress]).send({\n        from: connectedAddress,\n        gasLimit: web3.utils.toHex(gasInfo.gasLimit),     // posted at compound.finance/developers#gas-costs\n        gasPrice: web3.utils.toHex(gasInfo.gasPrice) // use ethgasstation.info (mainnet only)\n      })\n      .on('transactionHash', function(hash) {\n        setCollateralHash(getCData(index, collateralHash, hash))\n      })\n      .then(response => {\n        if(response.events.Failure) {\n          window.gtag('event', 'OpenCollateral', {\n            ...gtagParams,\n            error: 'response event fail'\n          })\n          setCollateralLoading(getCData(index, collateralLoading, false))\n          setCollateralHash(getCData(index, collateralHash, null))\n        } else {\n          window.gtag('event', 'OpenCollateral', gtagParams)\n          handleUpdate()\n          setCollateralStatus(getCData(index, collateralStatus, true))\n          setCollateralLoading(getCData(index, collateralLoading, false))\n          setCollateralHash(getCData(index, collateralHash, null))\n        }\n      })\n      .catch(error => {\n        window.gtag('event', 'OpenCollateral', {\n          ...gtagParams,\n          error: error.code === 4001 ? 'user rejected' : 'other error'\n        })\n        setCollateralLoading(getCData(index, collateralLoading, false))\n        setCollateralHash(getCData(index, collateralHash, null))\n      })\n    }\n  }\n\n  const sortData = (type, data, field, direction) => {\n    let list = [...data]\n    if (direction !== 'default') {\n      const compare = (a, b) => direction === 'down' ? b - a : a - b\n      list.sort((a,b) => {\n        switch(field) {\n          case 'saving_asset':\n          case 'loan_asset': {\n            const aItem = (a.uiName || a.name).toUpperCase() \n            const bItem = (b.uiName || b.name).toUpperCase()\n            const up = (s1, s2) => s1 === s2 ? 0 : s1 < s2 ? -1 : 1\n            return direction === 'down' ? -up(aItem, bItem) : up(aItem, bItem) \n          }\n          case 'saving_APY': {\n            const aItem = +BigNumber(a.savingsAPY).plus(a.savingsMintAPY).plus(a.isLPToken ? a.lpTotalAPY : 0)\n            const bItem = +BigNumber(b.savingsAPY).plus(b.savingsMintAPY).plus(b.isLPToken ? b.lpTotalAPY : 0)\n            return compare(aItem, bItem)\n          }\n          case 'loan_APY': {\n            const aItem = +BigNumber(a.loanAPY).plus(a.loanMintAPY)\n            const bItem = +BigNumber(b.loanAPY).plus(b.loanMintAPY)\n            return compare(aItem, bItem)\n          }\n          case 'savingBalance': {\n            const aItem = props.curCurrenry === 0 ? a.savingsBalanceFormatted : a.savingsBalanceFiat\n            const bItem = props.curCurrenry === 0 ? b.savingsBalanceFormatted : b.savingsBalanceFiat\n            return compare(aItem, bItem)\n          }\n          case 'loanBalance': {\n            const aItem = props.curCurrenry === 0 ? a.loanBalanceFormatted : a.loanBalanceFiat\n            const bItem = props.curCurrenry === 0 ? b.loanBalanceFormatted : b.loanBalanceFiat\n            return compare(aItem, bItem)\n          }\n        }\n      })\n    } \n\n    for (let [key, value] of Object.entries(data)) {\n      if (isNaN(parseInt(key))) {\n        list[key] = value\n      }\n    }\n\n    return list;\n  }\n\n  const sortHandler = (type, field) => {\n    const sortField = type === 'saving' ? savingSort.field : loanSort.field\n    const sortDirection = type === 'saving' ? savingSort.direction : loanSort.direction\n    let list = type === 'saving' ? curSavingList : curLoanList\n\n    let direction = 'default'\n    if (!sortField || sortField !== field) {\n      direction = 'down'\n    } else {\n      const arr = ['down', 'up', 'default']\n      let index = arr.findIndex(i => i === sortDirection)\n      index = (index + 1) % arr.length\n      direction = arr[index]\n    }\n\n    if (direction !== 'default') {\n      list = sortData(type, list, field, direction)\n    }\n\n    if (type === 'saving')  {\n      setSavingCurList(list)\n      setSavingSort({\n        field,\n        direction\n      })\n    } else {\n      setCurLoanList(list)\n      setLoanSort({\n        field,\n        direction\n      })\n    }\n  }\n\n  // UI render\n\n  const AccountsLoading =\n    <div className={styles.emptyMessageContainer}>\n      <ContentLoader\n          height={100}\n          width=\"100%\"\n          speed={1}\n          backgroundColor={loadingColors.background}\n          foregroundColor={loadingColors.foreground}\n        >\n          <rect x=\"0\" y=\"20\" rx=\"0\" ry=\"0\" width=\"100%\" height=\"25\" />\n          <rect x=\"0\" y=\"70\" rx=\"0\" ry=\"0\" width=\"100%\" height=\"25\" />\n      </ContentLoader>\n    </div>\n\n  const SavingsEmptyMsg =\n  <div className={styles.emptyMessage}>\n    <img\n        src={SupplyEmptyImage}\n        width=\"64\"\n        height=\"64\"\n        className=\"d-inline-block align-top\"\n        alt=\"Savings Empty Logo\"\n    />\n    <div className={styles.message}>{t('Banking.SavingsEmptyMsgTitle')}</div>\n    <div className={styles.description}>{t('Banking.SavingsEmptyMsgDesc')}</div>\n  </div>\n\n  const LoanEmptyMsg =\n    <div className={styles.emptyMessage}>\n      <img\n          src={BorrowEmptyImage}\n          width=\"64\"\n          height=\"64\"\n          className=\"d-inline-block align-top\"\n          alt=\"Loan Empty Logo\"\n      />\n      <div className={styles.message}>{t('Banking.LoanEmptyMsgTitle')}</div>\n      <div className={styles.description}>{t('Banking.LoanEmptyMsgDesc')}</div>\n    </div>\n\n  const ActiveSavingsAccounts = curSavingList.map((market, i) => {\n    return market.savingsBalance > 0 && (\n          <tr key={market.symbol}>\n              <td>\n                  <div className={styles.asset}>\n                      {\n                        !market.isLPToken ?\n                        <img\n                            src={market.logo}\n                            width=\"auto\"\n                            height=\"24\"\n                            className=\"d-inline-block align-top\"\n                            alt=\"Logo\"\n                        /> :\n                        <TwinLogo\n                          mode={2}\n                          logo1={market.logo1}\n                          logo2={market.logo2} \n                        />\n                      }\n                      <div className={styles.name}>{market.name}</div>\n                  </div>\n              </td>\n              <td>\n                  <div className={styles.dataContainer}>\n                      <div className={styles.dataPrimary}>\n                        {(parseFloat(market.savingsAPY) + parseFloat(market.isLPToken ? market.lpTotalAPY : market.savingsMintAPY)).toFixed(2) + '%'}\n                      </div>\n                      <div className={styles.dataSecondary}>\n                        {parseFloat(market.savingsAPY).toFixed(2) + '%'} + {parseFloat(market.isLPToken ? market.lpTotalAPY : market.savingsMintAPY).toFixed(2) + '%'}\n                      </div>\n                  </div>\n              </td>\n              {/* <td>\n                  <div className={styles.dataContainer}>\n                      <div className={styles.dataPrimary}>\n                        {FetchData.getSupplyRewardsAPR(market).toFixed(2)}\n                      </div>\n                  </div>\n              </td> */}\n              <td>\n                  <div className={styles.dataContainer}>\n                      <div className={styles.dataPrimary}>\n                        {FetchData.getCurrencyFormatted(market.savingsBalanceFiat)}\n                      </div>\n                      <div className={styles.dataSecondary}>\n                        {parseFloat(market.savingsBalanceFormatted).toFixed(4) + ' ' + market.symbol}\n                      </div>\n                  </div>\n              </td>\n              {\n                collateralLoading?.[i] ? (\n                  <td colSpan={2}>\n                    <PendingHash\n                      styles={styles}\n                      txnHash={collateralHash?.[i]}\n                      pendingDesc={collateralStatus?.[i] ? t('Banking.DisablingCollateral') : t('Banking.EnablingCollateral')}\n                    />\n                  </td> \n                ) : (\n                  <>\n                    <td>\n                        <div className={styles.dataContainer}>\n                          <DataContext.Consumer>\n                            {\n                              ({handleUpdate}) => (\n                                <Form>\n                                    <Form.Check \n                                        type=\"switch\"\n                                        id={market.symbol + '-switch'}\n                                        className={styles.switchbutton}\n                                        checked={collateralStatus?.[i]}\n                                        onChange={(e) => handleCollateral(market, i, handleUpdate)}\n                                    />\n                                </Form>\n                              )\n                            }\n                          </DataContext.Consumer>\n                        </div>\n                    </td>\n                    <td>\n                        <div className={styles.dataContainer}>\n                          <Button \n                            variant=\"outline-green\" \n                            size=\"sm\"\n                            onClick={() => handleShow(\"withdraw\", i)}\n                          >\n                            {t('Banking.Withdraw')}\n                          </Button>\n                        </div>\n                    </td>\n                  </>\n                )\n              }\n\n          </tr>\n      )\n    })\n\n  const ActiveLoanAccounts = curLoanList.map((market, i) => {\n    return market.loanBalance > 0 && (\n          <tr key={market.symbol}>\n              <td>\n                  <div className={styles.asset}>\n                      {   \n                        !market.isLPToken ?\n                        <img\n                            src={market.logo}\n                            width=\"auto\"\n                            height=\"24\"\n                            className=\"d-inline-block align-top\"\n                            alt=\"Logo\"\n                        /> :\n                        <TwinLogo\n                          mode={2}\n                          logo1={market.logo1}\n                          logo2={market.logo2} \n                        />\n                      }\n                      <div className={styles.name}>{market.name}</div>\n                  </div>\n              </td>\n              <td>\n                  <div className={styles.dataContainer}>\n                    <div className={styles.dataPrimary}>\n                      {(parseFloat(market.loanAPY) - parseFloat(market.loanMintAPY)).toFixed(2) + '%'}\n                    </div>\n                    <div className={styles.dataSecondary}>\n                      {parseFloat(market.loanAPY).toFixed(2) + '%'} - {parseFloat(market.loanMintAPY).toFixed(2) + '%'}\n                    </div>\n                  </div>\n              </td>\n              {/* <td>\n                  <div className={styles.dataContainer}>\n                      <div className={styles.dataPrimary}>\n                        {FetchData.getBorrowRewardsAPR(market).toFixed(2)}\n                      </div>\n                  </div>\n              </td> */}\n              <td>\n                  <div className={styles.dataContainer}>\n                      <div className={styles.dataPrimary}>\n                        {'$' + parseFloat(market.loanBalanceFiat).toFixed(2)}\n                      </div>\n                      <div className={styles.dataSecondary}>\n                        {parseFloat(market.loanBalanceFormatted).toFixed(4) + ' ' + market.symbol}\n                      </div>\n                  </div>\n              </td>\n              <td>\n                  <div className={styles.dataContainer}>\n                      <Button \n                        variant=\"outline-blue\" \n                        size=\"sm\" \n                        onClick={() => handleShow(\"repay\", i)}\n                      >\n                        {t('Banking.Repay')}\n                      </Button>\n                  </div>\n              </td>\n          </tr>\n      )\n    })\n\n  const SavingsAccountsList = \n    <Table responsive className={styles.tableContainer}>\n      <thead>\n        <tr style={{ textTransform: \"capitalize\" }}>\n          <th>{t('Banking.Assets')}</th>\n          <th>\n            <span className={classNames(styles.titleTxt)}>\n              <TorTooltip\n                type=\"line\"\n                title={t('Banking.Markets.SupplyAPY')}\n                desc={t('Banking.Markets.SupplyAPY-info')}\n              />\n            </span>\n          </th>\n          {/* <th>{t('Banking.YearlyRewards')}</th> */}\n          <th>{t('Banking.SavingsBalance')}</th>\n          <th>{t('Banking.CollateralValue')}</th>\n          <th>{t('Banking.Actions')}</th>\n        </tr>\n      </thead>\n      <tbody>\n          {ActiveSavingsAccounts}\n      </tbody>\n    </Table>\n\n  const LoanAccountsList = \n    <Table responsive className={styles.tableContainer}>\n      <thead>\n        <tr style={{ textTransform: \"capitalize\" }}>\n          <th>{t('Banking.Assets')}</th>\n          <th>\n            <span className={classNames(styles.titleTxt)}>\n              <TorTooltip\n                type=\"line\"\n                title={t('Banking.Markets.BorrowAPY')}\n                desc={t('Banking.Markets.BorrowAPY-info')}\n              />\n            </span>\n          </th>\n          {/* <th>{t('Banking.yearlyRewards')}</th> */}\n          <th>{t('Banking.LoanBalance')}</th>\n          <th>{t('Banking.Actions')}</th>\n        </tr>\n      </thead>\n      <tbody>\n          {ActiveLoanAccounts}\n      </tbody>\n    </Table>\n\n  return (\n    <div className={styles.accounts}>\n      <Container className={styles.accountsContainer}>\n          <Row className={styles.accountsWrap}>\n              <Col sm=\"12\" lg=\"6\">\n                  <div className={styles.tile}>\n                      <div className={styles.title}>{t('Banking.SuppliedAssets')}</div>\n                      {\n                        loading ? AccountsLoading\n                        : props.data.totalSavingsBalance > 0 ? SavingsAccountsList\n                        : SavingsEmptyMsg\n                      }\n                  </div>\n              </Col>\n              <Col sm=\"12\" lg=\"6\">\n                  <div className={styles.tile}>\n                      <div className={styles.title}>{t('Banking.BorrowedAssets')}</div>\n                      {\n                        loading ? AccountsLoading\n                        : props.data.totalLoanBalance > 0 ? LoanAccountsList\n                        : LoanEmptyMsg\n                      }\n                  </div>\n              </Col>\n          </Row>\n      </Container>\n      {\n        showWithdrawModal &&\n        <SavingsModalAll\n          show={showWithdrawModal}\n          onHide={() => handleClose(\"withdraw\")}\n          data={curSavingList[modalMarketIndex]}\n          alldata={props.data}\n        /> \n      }\n      {\n        showRepayModal &&\n        <RepayModalAll\n          show={showRepayModal}\n          onHide={() => handleClose(\"repay\")}\n          data={curSavingList[modalMarketIndex]}\n          alldata={props.data}\n          totalborrowlimitfiat={props.data.totalBorrowLimitFiat}\n          totalloanbalance={props.data.totalLoanBalance}\n          // accountLiquidityInFiat={props.data.accountLiquidityInFiat}\n          // totalSavingsBalance={props.data.totalSavingsBalance}\n        />\n      }\n      {\n        showCollateralErrorModal &&\n        <CollateralModal\n          show={showCollateralErrorModal}\n          onHide={() => setShowCollateralErrorModal(false)}\n          data={curSavingList[modalMarketIndex]}\n        />\n      }\n    </div>\n  )\n}\n\n\nexport default Accounts\n\n"],"sourceRoot":""}
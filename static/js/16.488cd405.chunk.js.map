{"version":3,"sources":["utils/logger.js","utils/promise.js","methods/GovernanceData.js","pages/bankV2/bank.module.scss","pages/bankV2/bank.js"],"names":["level","localStorage","getItem","loglevel","sleep","timer","time","Promise","resolve","clearTimeout","setTimeout","getCurrentVotes","web3","connectedAddress","networkType","contractABI","Config","COMP","ABI","contractAddress","network","address","eth","Contract","contract","methods","call","response","getCompBalanceWithAccrued","undefined","compoundLens","balance","symbol","accrued","isEnable","compContractABI","compContractAddress","compContract","comptrollerAddress","comptroller","compBalanceWithAccrued","allocated","e","decimals","result","Math","pow","parseInt","getProposals","governorAlpha","enumerateProposalState","state","proposalCount","proposalGets","proposalStateGets","Array","from","n","i","push","proposals","all","proposalStates","getPastEvents","fromBlock","toBlock","proposalCreatedEvents","reverse","forEach","p","description","returnValues","title","split","for_votes","parseFloat","forVotes","toFixed","against_votes","againstVotes","executedOn","moment","eta","format","log","info","module","exports","Dashboard","lazy","Accounts","MarketTable","loadAllMarketData","marketsArr","mainNetWeb3","Date","getTime","promises","market","loadMarketData","dataTree","promiseArr","FetchData","getTotalSavingsBalance","then","totalSavingsBalance","getTotalBorrowLimit","totalBorrowLimitFiat","getTotalBizSize","totalBizSize","replace","getTotalTVL","totalTVLFiat","getTotalBorrow","totalBorrow","getTotalLoanBalance","totalLoanBalance","getTotalSavingsAPY","totalSavingsAPY","getTotalLoanAPY","totalLoanAPY","getAccountLiquidity","accountLiquidity","inETH","accountLiquidityInFiat","inFiat","getTransactionLimit","transactionLimit","GovernanceData","compBalance","compSymbol","compAccrued","compIsEnable","getApyRate","savingsAPY","loanAPY","savingsMintAPY","loanMintAPY","borrowMonthlyRewards","supplyMonthlyRewards","compSupplySpeedPerDay","compBorrowSpeedPerDay","getWalletBalance","walletBalance","walletBalanceFormatted","walletBalanceFiat","getLiquidityBalance","liquidity","liquidityFormatted","liquidityFiat","getTotalBorrowed","totalBorrowed","totalBorrowedFormatted","totalBorrowedFiat","getTotalSupply","totalSupply","totalSupplyFormatted","totalSupplyFiat","utilRate","getSavingsBalance","savingsBalance","savingsBalanceFormatted","savingsBalanceFiat","savingsCTokenBalance","getLoanBalance","loanBalance","loanBalanceFormatted","loanBalanceFiat","checkMembership","isAssetMember","checkMintPaused","isMintPaused","checkBorrowPaused","isBorrowPaused","getPrice","price","getAccountAllowance","CoreData","isNativeToken","approved","allowance","getSwapRepayAllowance","swapRepayApproved","getDepositRepayAllowance","depositRepayApproved","getDepositSwapAllowance","depositSwapApproved","getCollateralStatus","collateralStatus","getMaticCap","borrowCap","borrowCapFormatted","borrowCapFiat","supplyCap","supplyCapFormatted","supplyCapFiat","getBorrowLimit","borrowLimit","borrowLimitFormatted","borrowLimitFiat","collateralFactor","getLPData","lpReward","lpTotalAPY","BankV2","props","useContext","WalletAddressContext","NetworkTypeContext","Web3Context","readonlyWeb3","hecoMainNetWeb3","getNetworkMarkets","useState","data","setData","useRef","useTranslation","t","useEffect","isUnMounted","initialLoad","fetching","globalUtils","ADDRESS_PLACEHOLDER","loading","console","error","loadData","window","setItem","COME_FROM","ComeFrom","banking","className","styles","marketsData","marketsDataContainer","inSafe"],"mappings":"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","file":"static/js/16.488cd405.chunk.js","sourcesContent":["import * as loglevel from 'loglevel'\n\nconst level = localStorage.getItem('loglevel:filda')\n\nif (process.env.NODE_ENV === 'development') {\n    // loglevel.setLevel(level ? level : 'DEBUG')\n    loglevel.setLevel(level ? level : 'WARN')\n} else {\n    loglevel.setLevel(level ? level : 'WARN')\n}\n\nexport default loglevel\n","export const promiseWithTimeout = promise => {\n    let timeoutId\n    const timeoutPromise = new Promise((_, reject) => {\n        timeoutId = setTimeout(() => reject(new Error('Promise timed out')), 3600 * 5 * 1000)\n    })\n\n    return {\n        promiseOrTimeout: Promise.race([promise, !window.document.hidden ? timeoutPromise : null]),\n        timeoutId\n    }\n}\n\n\nexport const sleep = (time = 10000) => {\n    let timer;\n    return new Promise(resolve => {\n        clearTimeout(timer)\n        timer = setTimeout(resolve, time)\n    })\n}","import moment from 'moment'\nimport Config from '../utils/config'\nimport log from '../utils/logger'\n\nconst getCurrentVotes = async(web3, connectedAddress, networkType) => {\n\n        //ERC20 Token Info (eg:DAI)\n        const contractABI = Config.COMP.ABI;\n        const contractAddress = Config.COMP.network[networkType].address;\n\n        let contract = await new web3.eth.Contract(contractABI, contractAddress);\n        const response = await contract.methods.getCurrentVotes(connectedAddress).call()\n        return response\n}\n\nconst getCompBalanceWithAccrued = async(web3, connectedAddress, networkType) => {\n    if(Config.COMP.network[networkType] == undefined || Config.compoundLens.network[networkType] == undefined) {\n        //Absence of governance token\n        return {\n            balance: 0,\n            symbol: \"\",\n            accrued: 0,\n            isEnable: false,\n        }\n    }\n\n    const compContractABI = Config.COMP.ABI;\n    const compContractAddress = Config.COMP.network[networkType].address;\n    let compContract = await new web3.eth.Contract(compContractABI, compContractAddress);\n    const comptrollerAddress = Config.comptroller.network[networkType].address\n    const contractABI = Config.compoundLens.ABI\n    const contractAddress = Config.compoundLens.network[networkType].address\n    const contract = await new web3.eth.Contract(contractABI, contractAddress)\n    let compBalanceWithAccrued = await contract.methods.getCompBalanceWithAccrued(compContractAddress, comptrollerAddress, connectedAddress).call()\n    const accrued = compBalanceWithAccrued.allocated\n    const balance = compBalanceWithAccrued.balance\n    const symbol = await compContract.methods.symbol().call((e, symbol) => {\n        return symbol\n    })\n    const decimals = await compContract.methods.decimals().call();\n    const result = {\n        balance: (balance / Math.pow(10, parseInt(decimals))),\n        symbol: symbol, \n        accrued: (accrued / Math.pow(10, parseInt(decimals))),\n        isEnable: false,\n    }\n    return result\n}\n\nconst getProposals = async(web3, networkType) => {\n    const contractABI = Config.governorAlpha.ABI;\n    const contractAddress = Config.governorAlpha.network[networkType].address;\n    let contract = await new web3.eth.Contract(contractABI, contractAddress);\n\n    const enumerateProposalState = (state) => {\n        const proposalStates = ['Pending', 'Active', 'Canceled', 'Defeated', 'Succeeded', 'Queued', 'Expired', 'Executed'];\n        return proposalStates[state];\n      };\n\n    const proposalCount = await contract.methods.proposalCount().call()\n\n    const proposalGets = []\n    const proposalStateGets = []\n    for (const i of Array.from(Array(parseInt(proposalCount)), (n,i) => i+1)) {\n        proposalGets.push(contract.methods.proposals(i).call());\n        proposalStateGets.push(contract.methods.state(i).call());\n    }\n\n    const proposals = await Promise.all(proposalGets)\n    const proposalStates = await Promise.all(proposalStateGets)\n    const proposalCreatedEvents = await contract.getPastEvents('ProposalCreated', {\n        fromBlock: 0,\n        toBlock: 'latest'\n    })\n\n    proposals.reverse()\n    proposalStates.reverse()\n    proposalCreatedEvents.reverse()\n\n\n    proposals.forEach((p, i) => {\n        const { description } = proposalCreatedEvents[i].returnValues;\n        p.title = description.split(/# |\\n/g)[1] || 'Untitled';\n        p.description = description.split(/# |\\n/g)[2] || 'No description.';\n        p.state = enumerateProposalState(proposalStates[i]);\n        p.for_votes = (parseFloat(p.forVotes) / 1e18).toFixed(2);\n        p.against_votes = (parseFloat(p.againstVotes) / 1e18).toFixed(2);\n        p.executedOn = moment(p.eta * 1000).format('MMMM Do, YYYY');\n      });\n\n    log.info(proposals)\n\n    return proposals\n}\n\nexport default {\n    getCurrentVotes: getCurrentVotes,\n    getProposals: getProposals,\n    getCompBalanceWithAccrued: getCompBalanceWithAccrued\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"banking\":\"bank_banking__1sFyS\",\"dashboard\":\"bank_dashboard__3T30f\",\"dashboardContainer\":\"bank_dashboardContainer__2fszr\",\"title\":\"bank_title__1MRvR\",\"description\":\"bank_description__2LAMU\",\"tilesContainer\":\"bank_tilesContainer__2TPFs\",\"tile\":\"bank_tile__34jQh\",\"label\":\"bank_label__2wE5q\",\"value\":\"bank_value__96kdp\",\"buttonGroup\":\"bank_buttonGroup__3Y2UI\",\"boostBtn\":\"bank_boostBtn__RviQZ\",\"apy\":\"bank_apy__37u2a\",\"apyTitle\":\"bank_apyTitle__2FArU\",\"apyNum\":\"bank_apyNum__2Ioqf\",\"supplyTile\":\"bank_supplyTile__8T1YY\",\"borrowTile\":\"bank_borrowTile__2LjFm\",\"netTile\":\"bank_netTile__2lNrf\",\"logo\":\"bank_logo__8sysg\",\"loanPercentWrap\":\"bank_loanPercentWrap__2XcoF\",\"loanPercentInner\":\"bank_loanPercentInner__33b6r\",\"loanLimitContainer\":\"bank_loanLimitContainer__1AJLR\",\"minLoan\":\"bank_minLoan__AWzWX\",\"maxLoan\":\"bank_maxLoan__3m-dC\",\"usedLoan\":\"bank_usedLoan__3T0g0\",\"usedLoanP\":\"bank_usedLoanP__1tXbw\",\"usedLoanT\":\"bank_usedLoanT__BAAzV\",\"usedPercent\":\"bank_usedPercent__yHWqj\",\"accounts\":\"bank_accounts__32lJK\",\"accountsContainer\":\"bank_accountsContainer__1eruZ\",\"asset\":\"bank_asset__3x45m\",\"name\":\"bank_name__15ZL7\",\"dataContainer\":\"bank_dataContainer__3WksZ\",\"dataPrimary\":\"bank_dataPrimary__gz6rv\",\"dataSecondary\":\"bank_dataSecondary__3bshp\",\"emptyMessage\":\"bank_emptyMessage__1dant\",\"message\":\"bank_message__2F7Wh\",\"marketsData\":\"bank_marketsData__2b12W\",\"marketsDataContainer\":\"bank_marketsDataContainer__3G2jZ\",\"savingWrap\":\"bank_savingWrap__2BlQU\",\"loanWrap\":\"bank_loanWrap__ndg7E\",\"colletWrap\":\"bank_colletWrap__PLI54\"};","import React, { useCallback, useContext, useEffect, useState, useRef, lazy } from 'react'\nimport classNames from 'classnames'\nimport { Container } from 'react-bootstrap'\nimport { useTranslation } from 'react-i18next'\nimport { WalletAddressContext, NetworkTypeContext, Web3Context, ReadonlyWeb3Context } from '../../context'\nimport { promiseWithTimeout } from '../../utils/promise'\nimport FetchData from '../../methods/FetchData'\nimport GovernanceData from '../../methods/GovernanceData'\nimport CoreData from '../../methods/CoreData'\nimport styles from './bank.module.scss'\nimport { globalUtils } from '../../utils/globalUtils'\n\n\nconst Dashboard = lazy(() => import('../../components/dashboardV2/Dashboard'))\nconst Accounts = lazy(() => import('../../components/accountsV2/Accounts'))\nconst MarketTable = lazy(() => import('../../components/MarketTableV2/marketTable'))\n\n\nexport async function loadAllMarketData(web3, networkType, connectedAddress, marketsArr, mainNetWeb3) {\n  const startTime = new Date().getTime()\n\n  const promises = []\n  for (let market of marketsArr) {\n    promises.push(loadMarketData(web3, networkType, connectedAddress, market))\n  }\n  const dataTree = await Promise.all(promises)\n\n  const promiseArr = [\n    FetchData.getTotalSavingsBalance(web3, connectedAddress, networkType, marketsArr)\n      .then(async (response) => {\n        dataTree.totalSavingsBalance = response\n      }),\n    FetchData.getTotalBorrowLimit(marketsArr)\n      .then(response => {\n        dataTree.totalBorrowLimitFiat = response\n      }),\n    FetchData.getTotalBizSize(marketsArr)\n      .then(response => {\n        dataTree.totalBizSize = response.toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,')\n      }),\n    FetchData.getTotalTVL(marketsArr)\n      .then(response => {\n        dataTree.totalTVLFiat = response.totalTVLFiat.toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,')\n      }),\n    FetchData.getTotalBorrow(marketsArr)\n      .then(response => {\n        dataTree.totalBorrow = response.totalBorrow.toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,')\n      }),\n    FetchData.getTotalLoanBalance(web3, connectedAddress, networkType, marketsArr)\n      .then(response => {\n        dataTree.totalLoanBalance = response\n      }),\n    FetchData.getTotalSavingsAPY(web3, connectedAddress, networkType, marketsArr)\n      .then(response => {\n        dataTree.totalSavingsAPY = response\n      }),\n    FetchData.getTotalLoanAPY(web3, connectedAddress, networkType, marketsArr)\n      .then(response => {\n        dataTree.totalLoanAPY = response\n      }),\n    FetchData.getAccountLiquidity(web3, connectedAddress, networkType)\n      .then(response => {\n        dataTree.accountLiquidity = response.inETH\n        dataTree.accountLiquidityInFiat = response.inFiat\n      }),\n    FetchData.getTransactionLimit(web3, connectedAddress, networkType, mainNetWeb3)\n      .then(response => {\n        dataTree.transactionLimit = response\n      }),\n    GovernanceData.getCompBalanceWithAccrued(web3, connectedAddress, networkType)\n      .then(response => {\n        dataTree.compBalance = response.balance\n        dataTree.compSymbol = response.symbol\n        dataTree.compAccrued = response.accrued\n        dataTree.compIsEnable = response.isEnable\n      })\n  ]\n  await Promise.all(promiseArr);\n\n  const endTime = new Date().getTime()\n  // console.info(`load all market data|end|${(endTime - startTime) / 1000}秒`)\n  return dataTree\n}\n\nasync function loadMarketData(web3, networkType, connectedAddress, market) {\n  const startTime = new Date().getTime()\n  // console.info(`${market.name}|start`)\n  const promiseArr = [\n    FetchData.getApyRate(web3, networkType, market)\n      .then(response => {\n        market.savingsAPY = response.savingsAPY\n        market.loanAPY = response.loanAPY\n        market.savingsMintAPY = response.savingsMintAPY\n        market.loanMintAPY = response.loanMintAPY\n        market.borrowMonthlyRewards = response.borrowMonthlyRewards\n        market.supplyMonthlyRewards = response.supplyMonthlyRewards\n        market.compSupplySpeedPerDay = response.compSupplySpeedPerDay;\n        market.compBorrowSpeedPerDay = response.compBorrowSpeedPerDay;\n      }),\n    FetchData.getWalletBalance(web3, connectedAddress, networkType, market)\n      .then(response => {\n        market.walletBalance = response.walletBalance\n        market.walletBalanceFormatted = response.walletBalanceFormatted\n        market.walletBalanceFiat = response.walletBalanceFiat\n      }),\n    FetchData.getLiquidityBalance(web3, networkType, market)\n      .then(response => {\n        market.liquidity = response.liquidity\n        market.liquidityFormatted = response.liquidityFormatted\n        market.liquidityFiat = response.liquidityFiat\n      }),\n    FetchData.getTotalBorrowed(web3, networkType, market)\n      .then(response => {\n        market.totalBorrowed = response.totalBorrowed\n        market.totalBorrowedFormatted = response.totalBorrowedFormatted\n        market.totalBorrowedFiat = response.totalBorrowedFiat\n      }),\n    FetchData.getTotalSupply(web3, networkType, market)\n      .then(response => {\n        market.totalSupply = response.totalSupply\n        market.totalSupplyFormatted = response.totalSupplyFormatted\n        market.totalSupplyFiat = response.totalSupplyFiat\n        market.utilRate = response.utilRate\n      }),\n    FetchData.getSavingsBalance(web3, connectedAddress, networkType, market)\n      .then(response => {\n        market.savingsBalance = response.savingsBalance\n        market.savingsBalanceFormatted = response.savingsBalanceFormatted\n        market.savingsBalanceFiat = response.savingsBalanceFiat\n        market.savingsCTokenBalance = response.savingsCTokenBalance\n      }),\n    FetchData.getLoanBalance(web3, connectedAddress, networkType, market)\n      .then(response => {\n        market.loanBalance = response.loanBalance\n        market.loanBalanceFormatted = response.loanBalanceFormatted\n        market.loanBalanceFiat = response.loanBalanceFiat\n      }),\n    FetchData.checkMembership(web3, connectedAddress, networkType, market)\n      .then(response => {\n        market.isAssetMember = response\n      }),\n    FetchData.checkMintPaused(web3, networkType, market).then(response => {\n      market.isMintPaused = response\n    }),\n    FetchData.checkBorrowPaused(web3, networkType, market).then(response => {\n      market.isBorrowPaused = response\n    }),\n    FetchData.getPrice(web3, networkType, market).then(response => {\n      market.price = response\n    }),\n    FetchData.getAccountAllowance(web3, connectedAddress, networkType, market).then(response => {\n      if (CoreData.isNativeToken(market.symbol, networkType)) {\n        market.approved = true\n      } else {\n        market.approved = response.allowance !== 0\n      }\n    }),\n    FetchData.getSwapRepayAllowance(web3, connectedAddress, networkType, market).then(response => {\n      if (CoreData.isNativeToken(market.symbol, networkType)) {\n        market.swapRepayApproved = true\n      } else {\n        market.swapRepayApproved = response.allowance !== 0\n      }\n    }),\n    FetchData.getDepositRepayAllowance(web3, connectedAddress, networkType, market).then(response => {\n      market.depositRepayApproved = response.allowance !== 0\n    }),\n    FetchData.getDepositSwapAllowance(web3, connectedAddress, networkType, market).then(response => {\n      market.depositSwapApproved = response.allowance !== 0\n    }),\n    FetchData.getCollateralStatus(web3, connectedAddress, networkType, market).then(response => {\n      market.collateralStatus = response\n    }),\n    FetchData.getMaticCap(web3, connectedAddress, networkType, market).then(response => {\n      market.borrowCap = response.borrowCap\n      market.borrowCapFormatted = response.borrowCapFormatted\n      market.borrowCapFiat = response.borrowCapFiat\n      market.supplyCap = response.supplyCap\n      market.supplyCapFormatted = response.supplyCapFormatted\n      market.supplyCapFiat = response.supplyCapFiat\n    })\n  ]\n\n  await Promise.all(promiseArr)\n  await FetchData.getBorrowLimit(web3, networkType, market)\n    .then(response => {\n      market.borrowLimit = response.borrowLimit\n      market.borrowLimitFormatted = response.borrowLimitFormatted\n      market.borrowLimitFiat = response.borrowLimitFiat\n      market.collateralFactor = response.collateralFactor\n    })\n  await FetchData.getLPData(web3, connectedAddress, networkType, market)\n    .then(response => {\n      market.lpReward = response.lpReward\n      market.lpTotalAPY = response.lpTotalAPY\n    })\n  const endTime = new Date().getTime()\n  // console.info(`${market.name}|end|${(endTime - startTime) / 1000}秒`)\n  return market\n}\n\nfunction BankV2(props) {\n  const { connectedAddress } = useContext(WalletAddressContext)\n  const { networkType } = useContext(NetworkTypeContext)\n  const { web3, readonlyWeb3, hecoMainNetWeb3 } = useContext(Web3Context)\n\n  let marketsArr = FetchData.getNetworkMarkets(networkType)\n  const [data, setData] = useState(marketsArr)\n  const [showLoadAlertModal, setShowLoadAlertModal] = useState(false)\n  const [curCurrenry, setCurCurrency] = useState(1) // 0:Native | 1:USD\n  const [switchCurrencyStyles, setSwitchCurrencyStyles] = useState({})\n  const homeEl = useRef(null)\n  const { t } = useTranslation()\n\n  useEffect(() => {\n    if (!props.data) {\n      setData(data => marketsArr)\n      return;\n    }\n    let isUnMounted = false\n    async function initialLoad() {\n      let fetching = false\n      async function loadData() {\n        if (!fetching && networkType && networkType !== \"unsupported\" && readonlyWeb3 && marketsArr) {\n          try {\n            fetching = true\n            const dataTree = await loadAllMarketData(\n              readonlyWeb3,\n              networkType,\n              connectedAddress || globalUtils.ADDRESS_PLACEHOLDER,\n              marketsArr,\n              hecoMainNetWeb3\n            );\n            dataTree.loading = false\n\n            if (!isUnMounted) {\n              setData(dataTree);\n            }\n          } catch (e) {\n            console.error('Error to load markets data:', e)\n          } finally {\n            fetching = false\n          }\n        }\n      }\n      loadData();\n    }\n\n    if (networkType === \"unsupported\") {\n      setData(data => marketsArr)\n    } else {\n      initialLoad()\n    }\n\n    return () => {\n      isUnMounted = true\n    }\n  }, [props.data])\n\n  useEffect(() => {\n    window.localStorage.setItem(globalUtils.COME_FROM, globalUtils.ComeFrom.banking);\n  }, []);\n\n  return (\n    <div className={styles.banking}>\n      <Dashboard data={data} styles={styles} />\n      <Accounts data={data} styles={styles} />\n      <div className={styles.marketsData}>\n        <Container className={styles.marketsDataContainer}>\n          <MarketTable data={data} inSafe={props.inSafe} />\n        </Container>\n      </div>\n    </div>\n  )\n}\n\nexport default BankV2\n"],"sourceRoot":""}
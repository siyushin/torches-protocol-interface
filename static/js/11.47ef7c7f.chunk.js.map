{"version":3,"sources":["utils/numberFormat.js","../node_modules/react-bootstrap/esm/Row.js","images/freshBank/logo.svg","images/freshBank/logo_grey.svg","components/subComponents/ClaimModalV2/ClaimModal.module.scss","images/freshBank/rocket.svg","components/subComponents/ClaimModalV2/ClaimModal.js","components/dashboardV2/Dashboard.js"],"names":["formatBigNumber","num","decimals","isNaN","toNumber","toLocaleString","maximumFractionDigits","formatDecimalPlace","decimalPlace","reg","RegExp","test","toFixed","validateDecimal","decimalNum","Row","React","ref","bsPrefix","className","as","Component","props","decoratedBsPrefix","useBootstrapPrefix","breakpoints","useBootstrapBreakpoints","sizePrefix","classes","forEach","brkPoint","cols","propValue","infix","push","_jsx","classNames","displayName","module","exports","ClaimModal","connectedAddress","useContext","WalletAddressContext","networkType","NetworkTypeContext","web3","Web3Context","useTranslation","t","i18n","useState","loading","setLoading","claimCompleted","setClaimCompleted","claimFailed","setClaimFailed","txnHash","setTxnHash","isClaim","isUnMountedRef","useRef","handleClose","closeModal","handleClaimClose","current","handleClaim","handleUpdate","gtagParams","url","window","location","href","supportedMarkets","data","map","item","qToken","network","address","CoreData","getGasInfo","gasInfo","getComptroller","comptroller","estimatedGas","methods","claimComp","estimateGas","then","gasAmount","send","from","gasLimit","gasPrice","utils","toHex","on","hash","claimTxnHash","response","events","Failure","gtag","error","catch","code","handleAddToken","tokenAddress","Config","COMP","tokenSymbol","compSymbol","ethereum","request","method","params","type","options","symbol","image","console","log","ModalLoading","title","TxnSuccessMsg","content","okText","handleOk","TxnErrorMsg","Consumer","Modal","show","onHide","aria-labelledby","styles","modal","centered","Header","closeButton","Body","claimContainer","logo","src","LogoGrey","alt","value","compAccrued","buttonItem","Button","variant","onClick","toUpperCase","language","link","blockExplorers","target","chain","LinkIcon","width","height","Dashboard","undefined","loanUsedPercent","parseFloat","totalLoanBalance","totalBorrowLimitFiat","showClaimModal","setShowClaimModal","percent","fixedNaN","showComingSoon","Date","getTime","dashboard","Container","dashboardContainer","description","tilesContainer","Col","savingWrap","xs","sm","md","tile","supplyTile","label","FetchData","getCurrencyFormatted","totalSavingsBalance","apy","apyTitle","apyNum","totalSavingsAPY","colletWrap","netTile","desc","style","marginTop","buttonGroup","size","disabled","Number","iconColor","boostBtn","rocket","loanWrap","borrowTile","totalLoanAPY","loanPercentWrap","loanPercentInner","loanLimitContainer","minLoan","usedLoan","usedLoanT","usedPercent","tooltipClassName","info","maxLoan"],"mappings":"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","file":"static/js/11.47ef7c7f.chunk.js","sourcesContent":["import { BigNumber } from 'bignumber.js'\r\n\r\nexport const formatBigNumber = (num, decimals) => {\r\n    if (isNaN(num) || num === null) {\r\n        return \"0\";\r\n    }\r\n\r\n    const n = (typeof num) === \"number\" ? num : num.toNumber();\r\n    return n.toLocaleString(\"en-US\", { maximumFractionDigits: decimals ?? 20 })\r\n}\r\n\r\nexport const formatDecimalNumber = (value) => {\r\n    const oldValue = new BigNumber(value);\r\n    if (oldValue.multipliedBy(100).abs() >= 1) {\r\n        return oldValue.toFixed(2, 1);\r\n    }\r\n    else if (oldValue.multipliedBy(100).abs() < 1 && oldValue.multipliedBy(10000).abs() >= 1) {\r\n        return oldValue.toFixed(4, 1);\r\n    }\r\n    else {\r\n        return oldValue.toString(10);\r\n    }\r\n}\r\n\r\nexport const formatBigNumberWithDecimals = (bigNumber, decimals, decimalPlace, toLocaleString) => {\r\n    if (!bigNumber) {\r\n        return\r\n    }\r\n\r\n    let dot = decimalPlace\r\n    // if (process.env.NODE_ENV === \"development\") {\r\n    //     dot = null\r\n    // }\r\n\r\n    if ((typeof bigNumber) === \"number\" || (typeof bigNumber) === \"string\") {\r\n        const n = new BigNumber(bigNumber).dividedBy(new BigNumber(10).pow(decimals))\r\n        if (toLocaleString) {\r\n            return n.toNumber().toLocaleString()\r\n        } else {\r\n            return n.toFixed(dot)\r\n        }\r\n    }\r\n\r\n    const n = bigNumber.dividedBy(new BigNumber(10).pow(decimals))\r\n    if (toLocaleString) {\r\n        return n.toNumber().toLocaleString()\r\n    } else {\r\n        return n.toFixed(dot)\r\n    }\r\n}\r\n\r\nexport const formatDecimalPlace = (num, decimalPlace = 4) => {\r\n    const reg = new RegExp('^(\\\\d)+(\\\\.(\\\\d){1,' + decimalPlace + '})?$')\r\n    return reg.test(num) ? num : num.toFixed(decimalPlace)\r\n}\r\n\r\n\r\n// 验证小数位数\r\nexport const validateDecimal = (decimalNum = 18) => new RegExp(\"^\\\\d*(\\\\.\\\\d{0,\" + decimalNum + \"})?$\")\r\n\r\n","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix, useBootstrapBreakpoints } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Row = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'row');\n  const breakpoints = useBootstrapBreakpoints();\n  const sizePrefix = `${decoratedBsPrefix}-cols`;\n  const classes = [];\n  breakpoints.forEach(brkPoint => {\n    const propValue = props[brkPoint];\n    delete props[brkPoint];\n    let cols;\n\n    if (propValue != null && typeof propValue === 'object') {\n      ({\n        cols\n      } = propValue);\n    } else {\n      cols = propValue;\n    }\n\n    const infix = brkPoint !== 'xs' ? `-${brkPoint}` : '';\n    if (cols != null) classes.push(`${sizePrefix}${infix}-${cols}`);\n  });\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, decoratedBsPrefix, ...classes)\n  });\n});\nRow.displayName = 'Row';\nexport default Row;","module.exports = __webpack_public_path__ + \"static/media/logo.e601b2df.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo_grey.883988a6.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"ClaimModal_modal__k5JPN\",\"claimContainer\":\"ClaimModal_claimContainer__4Nx1X\",\"logo\":\"ClaimModal_logo__3Wgl0\",\"title\":\"ClaimModal_title__12xDJ\",\"value\":\"ClaimModal_value__3KUB5\",\"buttonItem\":\"ClaimModal_buttonItem__3AbmR\",\"link\":\"ClaimModal_link__2piS4\"};","module.exports = __webpack_public_path__ + \"static/media/rocket.37d012a5.svg\";","import React, { useContext, useState, useRef } from 'react'\nimport { Button, Modal } from 'react-bootstrap'\nimport { useTranslation } from 'react-i18next'\nimport classNames from 'classnames'\nimport CoreData from '../../../methods/CoreData'\nimport log from '../../../utils/logger'\nimport { NetworkTypeContext, WalletAddressContext, Web3Context, DataContext } from '../../../context'\nimport { ModalPending, ModalSucAndFail } from '../../../components/littleComponents'\nimport { formatDecimalPlace } from '../../../utils/numberFormat'\nimport { FaAngleDoubleRight } from \"@react-icons/all-files/fa/FaAngleDoubleRight\"\nimport LogoGrey from '../../../images/freshBank/logo_grey.svg'\nimport LinkIcon from '../../../images/freshBank/link.svg'\nimport styles from './ClaimModal.module.scss'\nimport Config from '../../../utils/config'\n\nexport const ClaimModal = (props) => {\n    const { connectedAddress } = useContext(WalletAddressContext)\n    const { networkType } = useContext(NetworkTypeContext)\n    const { web3 } = useContext(Web3Context)\n\n    const { t, i18n } = useTranslation()\n    const [loading, setLoading] = useState(false)\n    const [claimCompleted, setClaimCompleted] = useState(false)\n    const [claimFailed, setClaimFailed] = useState(false)\n    const [txnHash, setTxnHash] = useState('')\n    const [isClaim, setIsClaim] = useState(true)\n    const isUnMountedRef = useRef(false)\n\n    const handleClose = async (closeModal = true) => {\n        setLoading(false)\n        setClaimCompleted(false)\n        setClaimFailed(false)\n        setTxnHash('')\n        if (closeModal) {\n            props.handleClaimClose()\n            isUnMountedRef.current = true\n        }\n    }\n\n    const handleClaim = async (handleUpdate) => {\n        const gtagParams = {\n            url: window.location.href,\n        }\n        setLoading(true)\n        let supportedMarkets = props.data.map(item => {\n            if (!item.qToken || !item.qToken.network || !item.qToken.network[networkType]) {\n                return \"0x0000000000000000000000000000000000000000\"\n            }\n\n            return item.qToken.network[networkType].address\n        })\n\n        const gasInfo = await CoreData.getGasInfo(web3)\n        const comptroller = await CoreData.getComptroller(web3, networkType)\n        let estimatedGas = comptroller.methods.claimComp(connectedAddress, supportedMarkets).estimateGas().then(async gasAmount => {\n            estimatedGas = estimatedGas * 2\n            await comptroller.methods.claimComp(connectedAddress, supportedMarkets).send({\n                from: connectedAddress,\n                gasLimit: estimatedGas,      \n                gasPrice: web3.utils.toHex(gasInfo.gasPrice)\n            })\n                .on('transactionHash', function (hash) {\n                    props.data.claimTxnHash = hash\n                    if (!isUnMountedRef.current) {\n                        setTxnHash(hash)\n                    }\n                })\n                .then(response => {\n                    if (response.events.Failure) {\n                        window.gtag('event', 'collectTop', {\n                            ...gtagParams,\n                            error: 'response event fail'\n                        })\n                        if (!isUnMountedRef.current) {\n                            setClaimFailed(true)\n                            setLoading(false)\n                        }\n                    } else {\n                        window.gtag('event', 'collectTop', gtagParams)\n                        if (!isUnMountedRef.current) {\n                            handleUpdate()\n                            setClaimCompleted(true)\n                            setLoading(false)\n                        }\n                    }\n                    props.data.claimTxnHash = null\n                })\n                .catch(error => {\n                    if (error.code === 4001) {\n                        window.gtag('event', 'collectTop', {\n                            ...gtagParams,\n                            error: 'user rejected'\n                        })\n                        if (!isUnMountedRef.current) {\n                            handleClose(false)\n                        }\n                    } else {\n                        window.gtag('event', 'collectTop', {\n                            ...gtagParams,\n                            error: 'other error1'\n                        })\n                        if (!isUnMountedRef.current) {\n                            setClaimFailed(true)\n                            setLoading(false)\n                        }\n                        props.data.claimTxnHash = null\n                    }\n                })\n        }).catch(function (error) {\n            window.gtag('event', 'collectTop', {\n                ...gtagParams,\n                error: 'other error2'\n            })\n            if (!isUnMountedRef.current) {\n                setClaimFailed(true)\n                setLoading(false)\n            }\n            props.data.claimTxnHash = null\n        });\n    }\n\n    const handleAddToken = async (handleUpdate) => {\n        const gtagParams = {\n            url: window.location.href,\n        }\n\n        const tokenAddress = Config.COMP.network[networkType].address;\n        const tokenSymbol = props.data.compSymbol;\n        const tokenDecimals = 18;\n        const tokenImage = 'https://www.torches.finance/favicon.png';\n\n        try {\n            // wasAdded is a boolean. Like any RPC method, an error may be thrown.\n            const wasAdded = await window.ethereum.request({\n              method: 'wallet_watchAsset',\n              params: {\n                type: 'ERC20', // Initially only supports ERC20, but eventually more!\n                options: {\n                  address: tokenAddress, // The address that the token is at.\n                  symbol: tokenSymbol, // A ticker symbol or shorthand, up to 5 chars.\n                  decimals: tokenDecimals, // The number of decimals in the token\n                  image: tokenImage, // A string url of the token logo\n                },\n              },\n            });\n\n            if (wasAdded) {\n              window.gtag('event', 'addTop', gtagParams)\n              console.log('Thanks for your interest!');\n            } else {\n              console.log('Your loss!');\n              window.gtag('event', 'addTop', {\n                ...gtagParams,\n                error: 'response event fail'\n              })\n            }\n        } catch (error) {\n            console.log(error);\n            window.gtag('event', 'addTop', {\n                ...gtagParams,\n                error: 'other error'\n            })\n        }\n    }\n\n\n    //UI Rendering\n\n    const ModalLoading = \n    <ModalSucAndFail \n        type=\"loading\"\n        txnHash={txnHash}\n        title={t('CommonModal.PleaseWait')}\n    />\n\n\n\n    const TxnSuccessMsg = \n        <ModalSucAndFail \n            type=\"success\"\n            txnHash={txnHash}\n            content={isClaim ? t('Banking.ClaimModal.TokensClaimedSuccessfully') : t('Banking.ClaimModal.AddTokenToWalletSuccessfully')}\n            okText='OK'\n            handleOk={() => handleClose()}\n        />\n\n    \n\n    const TxnErrorMsg =\n        <DataContext.Consumer>\n            {\n                ({handleUpdate}) => (\n                    <ModalSucAndFail \n                        type=\"error\"\n                        txnHash={txnHash}\n                        content={isClaim ? t('Banking.ClaimModal.TokensClaimFailed') : t('Banking.ClaimModal.AddTokenToWalletFalid')}\n                        okText={t('CommonModal.Retry')}\n                        handleOk={() => isClaim ? handleClaim(handleUpdate) : handleAddToken(handleUpdate)}\n                    />\n                )\n            }\n        </DataContext.Consumer>\n\n\n    const ModalForm = () => {\n        return (\n            <Modal.Body>\n                <div className=\"contentContainer\">\n                    <div className={styles.claimContainer}>\n                        <img className={styles.logo} src={LogoGrey} alt=\"logo\"/>\n                        <div className={styles.title}>{t('Banking.ClaimModal.ClaimToken')}</div>\n                        <div className={styles.value}>{formatDecimalPlace(props.data.compAccrued, 8)}</div>\n                    </div>\n                    <div className=\"buttonsContainer\">\n                        <div className={styles.buttonItem}>\n                            <DataContext.Consumer>\n                                {\n                                    ({handleUpdate}) => (\n                                        <Button variant=\"green\" onClick={() => handleClaim(handleUpdate)}>\n                                            {CoreData.toUpperCase(i18n.language, t('Banking.Collect'))}\n                                        </Button>\n                                    )\n                                }\n                            </DataContext.Consumer>\n                        </div>\n                        <div className={styles.buttonItem}>\n                            <DataContext.Consumer>\n                                {\n                                    ({handleUpdate}) => (\n                                        <Button variant=\"outline-green-lg\" onClick={() => handleAddToken(handleUpdate)}>\n                                            {CoreData.toUpperCase(i18n.language, t('Banking.AddTokenToWallet'))}\n                                        </Button>\n                                    )\n                                }\n                            </DataContext.Consumer>\n                        </div>\n                        <a \n                            className={styles.link}\n                            href={Config.blockExplorers[networkType]}\n                            target=\"_blank\"\n                        >\n                            {t('Banking.ViewOnChainExplorer', {chain: networkType.toUpperCase()})} <img src={LinkIcon} width=\"auto\" height=\"16\" className=\"d-inline-block align-top\" alt=\"\" />\n                        </a>\n                    </div>\n                </div>\n            </Modal.Body>\n        )\n    }\n\n    return (\n        <Modal\n            show={props.show}\n            onHide={handleClose}\n            aria-labelledby=\"contained-modal-title-vcenter\"\n            className={classNames(\"customModal\", styles.modal)}\n            centered\n        >\n            <Modal.Header closeButton/>\n            {\n                loading ? ModalLoading :\n                    claimCompleted ? TxnSuccessMsg :\n                        claimFailed ? TxnErrorMsg : ModalForm()\n            }\n        </Modal>\n    )\n}\n","import React, { useContext, useState } from 'react'\nimport {Button, Col, Row, DropdownButton, Dropdown, Container} from 'react-bootstrap'\nimport classNames from 'classnames'\nimport { useTranslation } from 'react-i18next'\nimport ContentLoader from 'react-content-loader'\nimport CoreData from '../../methods/CoreData'\nimport FetchData from '../../methods/FetchData'\nimport Config from '../../utils/config'\nimport { NetworkTypeContext, WalletAddressContext } from '../../context'\nimport logo from '../../images/freshBank/logo.svg'\nimport { ClaimModal } from '../../components/subComponents/ClaimModalV2/ClaimModal'\nimport { ColorProgress, MoreToolTips, TorTooltip } from '../../components/littleComponents'\nimport rocket from '../../images/freshBank/rocket.svg'\n\n\nconst Dashboard = ({\n  styles,\n  data\n}) => {\n  const { connectedAddress } = useContext(WalletAddressContext)\n  const { networkType } = useContext(NetworkTypeContext)\n\n  let loading = networkType === \"unsupported\" ? false : (data.loading == undefined || connectedAddress == undefined) ? true : data.loading\n\n  const { t, i18n } = useTranslation()\n  let loanUsedPercent = ((parseFloat(data.totalLoanBalance) / parseFloat(data.totalBorrowLimitFiat)) * 100).toFixed(2)\n\n  const [showClaimModal, setShowClaimModal] = useState(false)\n\n\n\n  const handleClaimClose = () => {\n    setShowClaimModal(false)\n  }\n  const handleClaimShow = () => {\n    setShowClaimModal(true)\n  }\n\n  const percent = CoreData.fixedNaN(loanUsedPercent)\n\n  const showComingSoon = new Date('2022-07-15T10:00:00.000Z').getTime() > new Date().getTime()\n\n  return (\n    <div className={styles.dashboard}>\n      <Container className={styles.dashboardContainer}>\n        <h1 className={styles.title}>{t('Banking.SloganHead')}</h1>\n\n          <div className={styles.description}>{t('Banking.SloganDesc')}</div>\n          <div className={styles.tilesContainer}>\n              <Row>\n                  <Col className={styles.savingWrap} xs={6} sm={6} md={Config.COMP.network[networkType] ? 4 : 6}>\n                      <div className={classNames(styles.tile, styles.supplyTile)}>\n                          <div className={styles.label}>{t('Banking.SupplyBalance')}</div>\n                          <div className={styles.value}>{FetchData.getCurrencyFormatted(data.totalSavingsBalance, 4)}</div>\n                          <div className={styles.apy}>\n                            <span className={styles.apyTitle}>{t('Banking.APY')}</span>\n                            <span className={styles.apyNum}>{CoreData.fixedNaN(parseFloat(data.totalSavingsAPY).toFixed(2))}%</span>\n                          </div>\n                      </div>\n                  </Col>\n                  {\n                    Config.COMP.network[networkType] && (\n                      <Col className={styles.colletWrap} xs={12} sm={12} md=\"4\">\n                          <div className={classNames(styles.tile, styles.netTile)}>\n                              <img className={styles.logo} src={logo} alt=\"logo\" />\n                              <div className={styles.label}>\n                                <TorTooltip\n                                  type=\"line\"\n                                  title={t('Banking.Unclaimed')}\n                                  desc={(\n                                    <div>\n                                      <p>{t('Banking.Unclaimed-info1')}</p>\n                                      <p style={{marginTop: 10}}>{t('Banking.Unclaimed-info2')}</p>\n                                    </div>\n                                  )}\n                                />\n                              </div>\n                              <div className={styles.value}>\n                                {\n                                  showComingSoon ? 0\n                                   : data?.compAccrued ? parseFloat(data.compAccrued).toFixed(4) : 0\n                                }\n                              </div>\n                              <div className={styles.buttonGroup}>\n                                <Button \n                                  variant=\"outline-grey\" \n                                  size=\"sm\" \n                                  disabled={showComingSoon || Number(data.compAccrued) === 0 || loading}\n                                  onClick={handleClaimShow}\n                                >\n                                  {\n                                    showComingSoon ? (\n                                      <TorTooltip\n                                        type=\"icon\"\n                                        iconColor=\"white\"\n                                        title={t('Common.ComingSoon')}\n                                        desc={(\n                                          <div>\n                                            <p>{t('Banking.Unclaimed-info1')}</p>\n                                            <p style={{marginTop: 10}}>{t('Banking.Unclaimed-info2')}</p>\n                                          </div>\n                                        )}\n                                      />\n                                    ) : t('Banking.Collect')\n                                  }\n                                </Button>\n                                <a className={styles.boostBtn} href={`/${i18n.language}/nft#topRewards`}>\n                                  <img src={rocket} width={21} height={20}/>\n                                  <span>{t('Banking.Boost')}</span>\n                                </a>\n                              </div>\n\n                          </div>\n                      </Col>\n                    )\n                  }\n                  <Col className={styles.loanWrap} xs={6} sm={6} md={Config.COMP.network[networkType] ? 4 : 6}>\n                      <div className={classNames(styles.tile, styles.borrowTile)}>\n                          <div className={styles.label}>{t('Banking.BorrowBalance')}</div>\n                          <div className={styles.value}>{FetchData.getCurrencyFormatted(data.totalLoanBalance, 4)}</div>\n                          <div className={styles.apy}>\n                            <span className={styles.apyTitle}>{t('Banking.APY')}</span>\n                            <span className={styles.apyNum}>{CoreData.fixedNaN(parseFloat(data.totalLoanAPY).toFixed(2))}%</span>\n                          </div>\n                      </div>\n                  </Col>\n              </Row>\n          </div>\n          <div className={styles.loanPercentWrap}>\n            <div className={styles.loanPercentInner}>\n              <ColorProgress \n                  percent={percent}\n              />\n              <div className={styles.loanLimitContainer}>\n                <div className={styles.minLoan}>$0</div>\n                <div className={styles.usedLoan}>\n                  <div className={styles.usedLoanT}>\n                    <span className={styles.usedPercent}>{percent + '%'}</span>\n                    <TorTooltip\n                      type=\"line\"\n                      title={t('Banking.loanUsedPercent')}\n                      tooltipClassName=\"percent-tooltips\"\n                      desc={(\n                        <div className={styles.info}>\n                          <p>{t('Banking.loanUsedPercent-info1')}</p>\n                          <p>{t('Banking.loanUsedPercent-info2')}</p>\n                        </div>\n                      )}\n                    />         \n                  </div>\n                </div>\n                <div className={styles.maxLoan}>{'$' + CoreData.fixedNaN(parseFloat(data.totalBorrowLimitFiat).toFixed(2))}</div>\n              </div>\n            </div>\n          </div>\n      </Container>\n      {\n        showClaimModal && data.compSymbol != undefined &&\n        <ClaimModal\n          data={data}\n          logo={logo}\n          styles={styles}\n          handleClaimClose={handleClaimClose}\n          show={showClaimModal} />\n      }\n    </div>\n  )\n\n}\n\n\nexport default Dashboard\n"],"sourceRoot":""}